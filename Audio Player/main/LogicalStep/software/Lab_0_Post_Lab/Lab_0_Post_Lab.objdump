
Lab_0_Post_Lab.elf:     file format elf32-littlenios2
Lab_0_Post_Lab.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00004444 memsz 0x00004444 flags r-x
    LOAD off    0x00005464 vaddr 0x00804464 paddr 0x00805d08 align 2**12
         filesz 0x000018a4 memsz 0x000018a4 flags rw-
    LOAD off    0x000075ac vaddr 0x008075ac paddr 0x008075ac align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003f20  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000300  00804164  00804164  00005164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000018a4  00804464  00805d08  00005464  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  008075ac  008075ac  000075ac  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  008076cc  008076cc  00006d08  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006d08  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000710  00000000  00000000  00006d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000097e1  00000000  00000000  00007440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003570  00000000  00000000  00010c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003a83  00000000  00000000  00014191  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f38  00000000  00000000  00017c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002336  00000000  00000000  00018b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b87  00000000  00000000  0001ae82  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0001ba0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000138  00000000  00000000  0001ba70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001dcf3  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001dcf6  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001dd02  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001dd03  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001dd04  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001dd08  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001dd0c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001dd10  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001dd1b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001dd26  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0001dd31  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  0001dd34  2**0
                  CONTENTS, READONLY
 29 .jdi          00003c54  00000000  00000000  0001dd59  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008ff79  00000000  00000000  000219ad  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00804164 l    d  .rodata	00000000 .rodata
00804464 l    d  .rwdata	00000000 .rwdata
008075ac l    d  .bss	00000000 .bss
008076cc l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab_0_Post_Lab_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00800304 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00800460 l     F .text	00000038 alt_dev_reg
00804464 l     O .rwdata	00001060 jtag_uart_0
008054c4 l     O .rwdata	00000120 lcd_display
008055e4 l     O .rwdata	000000c4 uart
008056a8 l     O .rwdata	00000030 audio_i2c_config
008056d8 l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00800798 l     F .text	00000208 altera_avalon_jtag_uart_irq
008009a0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00805cd4 l     O .rwdata	00000004 colstart
00800fc0 l     F .text	000000b4 lcd_write_command
00801074 l     F .text	000000d4 lcd_write_data
00801148 l     F .text	000000cc lcd_clear_screen
00801214 l     F .text	000001e8 lcd_repaint_screen
008013fc l     F .text	000000c8 lcd_scroll_up
008014c4 l     F .text	000002a0 lcd_handle_escape
00801c4c l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00801e90 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00802138 l     F .text	0000009c altera_avalon_uart_irq
008021d4 l     F .text	000000e0 altera_avalon_uart_rxirq
008022b4 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080244c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00802678 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008029b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00802b18 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00802b44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00802d20 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00803008 l     F .text	00000050 alt_get_errno
00803058 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008042dd l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
008058b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00804004 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
008075c4 g     O .bss	00000004 alt_instruction_exception_handler
008003e8 g     F .text	00000078 alt_main
008075cc g     O .bss	00000100 alt_irq
00805d08 g       *ABS*	00000000 __flash_rwdata_start
008034a8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008075c8 g     O .bss	00000004 errno
008075b0 g     O .bss	00000004 alt_argv
0080dcd4 g       *ABS*	00000000 _gp
00803478 g     F .text	00000030 usleep
00805730 g     O .rwdata	00000180 alt_fd_list
00803620 g     F .text	00000090 alt_find_dev
00803a68 g     F .text	00000138 memcpy
00802de0 g     F .text	00000078 alt_io_redirect
00804164 g       *ABS*	00000000 __DTOR_END__
00803904 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00800b9c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00804120 g     F .text	00000008 .hidden __udivsi3
00803878 g     F .text	0000008c alt_icache_flush
00805ce8 g     O .rwdata	00000004 alt_max_fd
00802e58 g     F .text	000001b0 alt_irq_register
00805d00 g     O .rwdata	00000004 _global_impure_ptr
008076cc g       *ABS*	00000000 __bss_end
00803374 g     F .text	00000104 alt_tick
00802098 g     F .text	000000a0 altera_avalon_uart_init
008032dc g     F .text	00000098 alt_alarm_stop
008075b8 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
00805708 g     O .rwdata	00000028 alt_dev_null
00802ad4 g     F .text	00000044 alt_dcache_flush_all
00805d08 g       *ABS*	00000000 __ram_rwdata_end
00805ce0 g     O .rwdata	00000008 alt_dev_list
00804464 g       *ABS*	00000000 __ram_rodata_end
00804128 g     F .text	00000008 .hidden __umodsi3
008076cc g       *ABS*	00000000 end
00801764 g     F .text	000004e8 altera_avalon_lcd_16207_write
008026c8 g     F .text	000001ac altera_avalon_uart_write
008006e0 g     F .text	000000b8 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00804164 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00801f08 g     F .text	00000080 alt_avalon_timer_sc_init
00801fe8 g     F .text	00000060 altera_avalon_uart_write_fd
00802048 g     F .text	00000050 altera_avalon_uart_close_fd
00800da8 g     F .text	00000218 altera_avalon_jtag_uart_write
00803e70 g     F .text	00000194 __call_exitprocs
00800244 g     F .text	0000004c _start
008075bc g     O .bss	00000004 _alt_tick_rate
008075c0 g     O .bss	00000004 _alt_nticks
008004cc g     F .text	000000b0 alt_sys_init
00803d5c g     F .text	00000114 __register_exitproc
00800a48 g     F .text	00000068 altera_avalon_jtag_uart_close
00804464 g       *ABS*	00000000 __ram_rwdata_start
00804164 g       *ABS*	00000000 __ram_rodata_start
0080057c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008037c4 g     F .text	000000b4 alt_get_fd
008034c8 g     F .text	00000158 alt_busy_sleep
008039ec g     F .text	0000007c memcmp
0080063c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008076cc g       *ABS*	00000000 __alt_stack_base
0080068c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008036b0 g     F .text	00000114 alt_find_file
00802b94 g     F .text	000000a4 alt_dev_llist_insert
008075ac g       *ABS*	00000000 __bss_start
00803ba0 g     F .text	00000124 memset
00800290 g     F .text	00000074 main
008075b4 g     O .bss	00000004 alt_envp
008005dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00801cf8 g     F .text	00000138 altera_avalon_lcd_16207_init
00805cec g     O .rwdata	00000004 alt_errno
00804070 g     F .text	00000054 .hidden __divsi3
00804164 g       *ABS*	00000000 __CTOR_END__
00804164 g       *ABS*	00000000 __flash_rodata_start
00804164 g       *ABS*	00000000 __DTOR_LIST__
00800498 g     F .text	00000034 alt_irq_init
0080327c g     F .text	00000060 alt_release_fd
008039a0 g     F .text	00000014 atexit
00805d04 g     O .rwdata	00000004 _impure_ptr
008075ac g     O .bss	00000004 alt_argc
00802c94 g     F .text	0000005c _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00801e30 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00805cd8 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00805d08 g       *ABS*	00000000 _edata
00801f88 g     F .text	00000060 altera_avalon_uart_read_fd
008076cc g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00800ab0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
008039b4 g     F .text	00000038 exit
008040c4 g     F .text	0000005c .hidden __modsi3
00805cfc g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008041dc g     O .rodata	00000101 _ctype_
008023f8 g     F .text	00000054 altera_avalon_uart_close
00804130 g     F .text	00000034 _exit
00802874 g     F .text	00000140 alt_alarm_start
00803cc4 g     F .text	00000098 strlen
00803124 g     F .text	00000158 open
00802cf0 g     F .text	00000030 alt_icache_flush_all
00805cf0 g     O .rwdata	00000004 alt_priority_mask
0080249c g     F .text	000001dc altera_avalon_uart_read
00805cf4 g     O .rwdata	00000008 alt_alarm_list
00802c38 g     F .text	0000005c _do_ctors
00802a04 g     F .text	000000d0 close
00800368 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802034 	movhi	r2,128
  800140:	109d7304 	addi	r2,r2,30156
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802034 	movhi	r2,128
  800158:	109d7304 	addi	r2,r2,30156
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	21000104 	addi	r4,r4,4
  800168:	1105883a 	add	r2,r2,r4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	e17ffd17 	ldw	r5,-12(fp)
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a63c17 	ldw	r2,-26384(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a63c17 	ldw	r2,-26384(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	1809883a 	mov	r4,r3
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	e1bffe17 	ldw	r6,-8(fp)
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800260:	d6b73514 	ori	gp,gp,56532
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	109d6b14 	ori	r2,r2,30124

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18ddb314 	ori	r3,r3,30412

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08003680 	call	800368 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08003e80 	call	8003e8 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"


int main()
{
  800290:	defffe04 	addi	sp,sp,-8
  800294:	df000115 	stw	fp,4(sp)
  800298:	df000104 	addi	fp,sp,4

	do {
		//in a loop fashion
	  //read values from the push button pio core
		  //Reading push buttons(active low)
		buttons = IORD(BUTTON_PIO_BASE,0);
  80029c:	00804034 	movhi	r2,256
  8002a0:	10844804 	addi	r2,r2,4384
  8002a4:	10800037 	ldwio	r2,0(r2)
  8002a8:	e0bfff05 	stb	r2,-4(fp)

	  //read values from the switches pio core
		  //Reading push buttons(active high)
		switches = IORD(SWITCH_PIO_BASE,0);
  8002ac:	00804034 	movhi	r2,256
  8002b0:	10844404 	addi	r2,r2,4368
  8002b4:	10800037 	ldwio	r2,0(r2)
  8002b8:	e0bfff45 	stb	r2,-3(fp)

	}while(buttons == 1 || switches == 0);
  8002bc:	e0bfff03 	ldbu	r2,-4(fp)
  8002c0:	10800060 	cmpeqi	r2,r2,1
  8002c4:	103ff51e 	bne	r2,zero,80029c <__alt_data_end+0xff80029c>
  8002c8:	e0bfff43 	ldbu	r2,-3(fp)
  8002cc:	103ff326 	beq	r2,zero,80029c <__alt_data_end+0xff80029c>

  //Make the Push-Button PIO core bits (3:0) appear on LED (3:0).
	  //Turn on every other LED on the board(active high)
	  IOWR(LED_PIO_BASE,0x0,buttons);
  8002d0:	e0ffff03 	ldbu	r3,-4(fp)
  8002d4:	00804034 	movhi	r2,256
  8002d8:	10844c04 	addi	r2,r2,4400
  8002dc:	10c00035 	stwio	r3,0(r2)

  //Make Switches PIO Core bits (3:0) appear on LEDs (7:4).
	  //Turn on every other LED on the board(active high)
	  IOWR(LED_PIO_BASE,0x3,switches);
  8002e0:	e0ffff43 	ldbu	r3,-3(fp)
  8002e4:	00804034 	movhi	r2,256
  8002e8:	10844f04 	addi	r2,r2,4412
  8002ec:	10c00035 	stwio	r3,0(r2)

	  return 0;
  8002f0:	0005883a 	mov	r2,zero
}
  8002f4:	e037883a 	mov	sp,fp
  8002f8:	df000017 	ldw	fp,0(sp)
  8002fc:	dec00104 	addi	sp,sp,4
  800300:	f800283a 	ret

00800304 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800304:	defffc04 	addi	sp,sp,-16
  800308:	df000315 	stw	fp,12(sp)
  80030c:	df000304 	addi	fp,sp,12
  800310:	e13ffd15 	stw	r4,-12(fp)
  800314:	e17ffe15 	stw	r5,-8(fp)
  800318:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80031c:	e0fffe17 	ldw	r3,-8(fp)
  800320:	e0bffd17 	ldw	r2,-12(fp)
  800324:	18800c26 	beq	r3,r2,800358 <alt_load_section+0x54>
  {
    while( to != end )
  800328:	00000806 	br	80034c <alt_load_section+0x48>
    {
      *to++ = *from++;
  80032c:	e0bffe17 	ldw	r2,-8(fp)
  800330:	10c00104 	addi	r3,r2,4
  800334:	e0fffe15 	stw	r3,-8(fp)
  800338:	e0fffd17 	ldw	r3,-12(fp)
  80033c:	19000104 	addi	r4,r3,4
  800340:	e13ffd15 	stw	r4,-12(fp)
  800344:	18c00017 	ldw	r3,0(r3)
  800348:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80034c:	e0fffe17 	ldw	r3,-8(fp)
  800350:	e0bfff17 	ldw	r2,-4(fp)
  800354:	18bff51e 	bne	r3,r2,80032c <__alt_data_end+0xff80032c>
    {
      *to++ = *from++;
    }
  }
}
  800358:	e037883a 	mov	sp,fp
  80035c:	df000017 	ldw	fp,0(sp)
  800360:	dec00104 	addi	sp,sp,4
  800364:	f800283a 	ret

00800368 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800368:	defffe04 	addi	sp,sp,-8
  80036c:	dfc00115 	stw	ra,4(sp)
  800370:	df000015 	stw	fp,0(sp)
  800374:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800378:	01002034 	movhi	r4,128
  80037c:	21174204 	addi	r4,r4,23816
  800380:	01402034 	movhi	r5,128
  800384:	29511904 	addi	r5,r5,17508
  800388:	01802034 	movhi	r6,128
  80038c:	31974204 	addi	r6,r6,23816
  800390:	08003040 	call	800304 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  800394:	01002034 	movhi	r4,128
  800398:	21000804 	addi	r4,r4,32
  80039c:	01402034 	movhi	r5,128
  8003a0:	29400804 	addi	r5,r5,32
  8003a4:	01802034 	movhi	r6,128
  8003a8:	31809104 	addi	r6,r6,580
  8003ac:	08003040 	call	800304 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8003b0:	01002034 	movhi	r4,128
  8003b4:	21105904 	addi	r4,r4,16740
  8003b8:	01402034 	movhi	r5,128
  8003bc:	29505904 	addi	r5,r5,16740
  8003c0:	01802034 	movhi	r6,128
  8003c4:	31911904 	addi	r6,r6,17508
  8003c8:	08003040 	call	800304 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8003cc:	0802ad40 	call	802ad4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8003d0:	0802cf00 	call	802cf0 <alt_icache_flush_all>
}
  8003d4:	e037883a 	mov	sp,fp
  8003d8:	dfc00117 	ldw	ra,4(sp)
  8003dc:	df000017 	ldw	fp,0(sp)
  8003e0:	dec00204 	addi	sp,sp,8
  8003e4:	f800283a 	ret

008003e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8003e8:	defffd04 	addi	sp,sp,-12
  8003ec:	dfc00215 	stw	ra,8(sp)
  8003f0:	df000115 	stw	fp,4(sp)
  8003f4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8003f8:	0009883a 	mov	r4,zero
  8003fc:	08004980 	call	800498 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  800400:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800404:	08004cc0 	call	8004cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800408:	01002034 	movhi	r4,128
  80040c:	21105904 	addi	r4,r4,16740
  800410:	01402034 	movhi	r5,128
  800414:	29505904 	addi	r5,r5,16740
  800418:	01802034 	movhi	r6,128
  80041c:	31905904 	addi	r6,r6,16740
  800420:	0802de00 	call	802de0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  800424:	0802c380 	call	802c38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  800428:	01002034 	movhi	r4,128
  80042c:	210b2504 	addi	r4,r4,11412
  800430:	08039a00 	call	8039a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  800434:	d1263617 	ldw	r4,-26408(gp)
  800438:	d0e63717 	ldw	r3,-26404(gp)
  80043c:	d0a63817 	ldw	r2,-26400(gp)
  800440:	180b883a 	mov	r5,r3
  800444:	100d883a 	mov	r6,r2
  800448:	08002900 	call	800290 <main>
  80044c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  800450:	01000044 	movi	r4,1
  800454:	0802a040 	call	802a04 <close>
  exit (result);
  800458:	e13fff17 	ldw	r4,-4(fp)
  80045c:	08039b40 	call	8039b4 <exit>

00800460 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  800460:	defffd04 	addi	sp,sp,-12
  800464:	dfc00215 	stw	ra,8(sp)
  800468:	df000115 	stw	fp,4(sp)
  80046c:	df000104 	addi	fp,sp,4
  800470:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  800474:	e13fff17 	ldw	r4,-4(fp)
  800478:	01402034 	movhi	r5,128
  80047c:	29573804 	addi	r5,r5,23776
  800480:	0802b940 	call	802b94 <alt_dev_llist_insert>
}
  800484:	e037883a 	mov	sp,fp
  800488:	dfc00117 	ldw	ra,4(sp)
  80048c:	df000017 	ldw	fp,0(sp)
  800490:	dec00204 	addi	sp,sp,8
  800494:	f800283a 	ret

00800498 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800498:	defffd04 	addi	sp,sp,-12
  80049c:	dfc00215 	stw	ra,8(sp)
  8004a0:	df000115 	stw	fp,4(sp)
  8004a4:	df000104 	addi	fp,sp,4
  8004a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  8004ac:	08034a80 	call	8034a8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8004b0:	00800044 	movi	r2,1
  8004b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8004b8:	e037883a 	mov	sp,fp
  8004bc:	dfc00117 	ldw	ra,4(sp)
  8004c0:	df000017 	ldw	fp,0(sp)
  8004c4:	dec00204 	addi	sp,sp,8
  8004c8:	f800283a 	ret

008004cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8004cc:	defffe04 	addi	sp,sp,-8
  8004d0:	dfc00115 	stw	ra,4(sp)
  8004d4:	df000015 	stw	fp,0(sp)
  8004d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  8004dc:	01004034 	movhi	r4,256
  8004e0:	21042004 	addi	r4,r4,4224
  8004e4:	000b883a 	mov	r5,zero
  8004e8:	01800104 	movi	r6,4
  8004ec:	01c0fa04 	movi	r7,1000
  8004f0:	0801f080 	call	801f08 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8004f4:	01002034 	movhi	r4,128
  8004f8:	21112304 	addi	r4,r4,17548
  8004fc:	000b883a 	mov	r5,zero
  800500:	000d883a 	mov	r6,zero
  800504:	08006e00 	call	8006e0 <altera_avalon_jtag_uart_init>
  800508:	01002034 	movhi	r4,128
  80050c:	21111904 	addi	r4,r4,17508
  800510:	08004600 	call	800460 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  800514:	01002034 	movhi	r4,128
  800518:	21153b04 	addi	r4,r4,21740
  80051c:	0801cf80 	call	801cf8 <altera_avalon_lcd_16207_init>
  800520:	01002034 	movhi	r4,128
  800524:	21153104 	addi	r4,r4,21700
  800528:	08004600 	call	800460 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  80052c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  800530:	01002034 	movhi	r4,128
  800534:	21158304 	addi	r4,r4,22028
  800538:	000b883a 	mov	r5,zero
  80053c:	018000c4 	movi	r6,3
  800540:	08020980 	call	802098 <altera_avalon_uart_init>
  800544:	01002034 	movhi	r4,128
  800548:	21157904 	addi	r4,r4,21988
  80054c:	08004600 	call	800460 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  800550:	01002034 	movhi	r4,128
  800554:	2115aa04 	addi	r4,r4,22184
  800558:	08004600 	call	800460 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  80055c:	01002034 	movhi	r4,128
  800560:	2115b604 	addi	r4,r4,22232
  800564:	08004600 	call	800460 <alt_dev_reg>
}
  800568:	e037883a 	mov	sp,fp
  80056c:	dfc00117 	ldw	ra,4(sp)
  800570:	df000017 	ldw	fp,0(sp)
  800574:	dec00204 	addi	sp,sp,8
  800578:	f800283a 	ret

0080057c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80057c:	defffa04 	addi	sp,sp,-24
  800580:	dfc00515 	stw	ra,20(sp)
  800584:	df000415 	stw	fp,16(sp)
  800588:	df000404 	addi	fp,sp,16
  80058c:	e13ffd15 	stw	r4,-12(fp)
  800590:	e17ffe15 	stw	r5,-8(fp)
  800594:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800598:	e0bffd17 	ldw	r2,-12(fp)
  80059c:	10800017 	ldw	r2,0(r2)
  8005a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8005a4:	e0bffc17 	ldw	r2,-16(fp)
  8005a8:	10c00a04 	addi	r3,r2,40
  8005ac:	e0bffd17 	ldw	r2,-12(fp)
  8005b0:	10800217 	ldw	r2,8(r2)
  8005b4:	1809883a 	mov	r4,r3
  8005b8:	e17ffe17 	ldw	r5,-8(fp)
  8005bc:	e1bfff17 	ldw	r6,-4(fp)
  8005c0:	100f883a 	mov	r7,r2
  8005c4:	0800b9c0 	call	800b9c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8005c8:	e037883a 	mov	sp,fp
  8005cc:	dfc00117 	ldw	ra,4(sp)
  8005d0:	df000017 	ldw	fp,0(sp)
  8005d4:	dec00204 	addi	sp,sp,8
  8005d8:	f800283a 	ret

008005dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8005dc:	defffa04 	addi	sp,sp,-24
  8005e0:	dfc00515 	stw	ra,20(sp)
  8005e4:	df000415 	stw	fp,16(sp)
  8005e8:	df000404 	addi	fp,sp,16
  8005ec:	e13ffd15 	stw	r4,-12(fp)
  8005f0:	e17ffe15 	stw	r5,-8(fp)
  8005f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8005f8:	e0bffd17 	ldw	r2,-12(fp)
  8005fc:	10800017 	ldw	r2,0(r2)
  800600:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  800604:	e0bffc17 	ldw	r2,-16(fp)
  800608:	10c00a04 	addi	r3,r2,40
  80060c:	e0bffd17 	ldw	r2,-12(fp)
  800610:	10800217 	ldw	r2,8(r2)
  800614:	1809883a 	mov	r4,r3
  800618:	e17ffe17 	ldw	r5,-8(fp)
  80061c:	e1bfff17 	ldw	r6,-4(fp)
  800620:	100f883a 	mov	r7,r2
  800624:	0800da80 	call	800da8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  800628:	e037883a 	mov	sp,fp
  80062c:	dfc00117 	ldw	ra,4(sp)
  800630:	df000017 	ldw	fp,0(sp)
  800634:	dec00204 	addi	sp,sp,8
  800638:	f800283a 	ret

0080063c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80063c:	defffc04 	addi	sp,sp,-16
  800640:	dfc00315 	stw	ra,12(sp)
  800644:	df000215 	stw	fp,8(sp)
  800648:	df000204 	addi	fp,sp,8
  80064c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800650:	e0bfff17 	ldw	r2,-4(fp)
  800654:	10800017 	ldw	r2,0(r2)
  800658:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80065c:	e0bffe17 	ldw	r2,-8(fp)
  800660:	10c00a04 	addi	r3,r2,40
  800664:	e0bfff17 	ldw	r2,-4(fp)
  800668:	10800217 	ldw	r2,8(r2)
  80066c:	1809883a 	mov	r4,r3
  800670:	100b883a 	mov	r5,r2
  800674:	0800a480 	call	800a48 <altera_avalon_jtag_uart_close>
}
  800678:	e037883a 	mov	sp,fp
  80067c:	dfc00117 	ldw	ra,4(sp)
  800680:	df000017 	ldw	fp,0(sp)
  800684:	dec00204 	addi	sp,sp,8
  800688:	f800283a 	ret

0080068c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80068c:	defffa04 	addi	sp,sp,-24
  800690:	dfc00515 	stw	ra,20(sp)
  800694:	df000415 	stw	fp,16(sp)
  800698:	df000404 	addi	fp,sp,16
  80069c:	e13ffd15 	stw	r4,-12(fp)
  8006a0:	e17ffe15 	stw	r5,-8(fp)
  8006a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8006a8:	e0bffd17 	ldw	r2,-12(fp)
  8006ac:	10800017 	ldw	r2,0(r2)
  8006b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8006b4:	e0bffc17 	ldw	r2,-16(fp)
  8006b8:	10800a04 	addi	r2,r2,40
  8006bc:	1009883a 	mov	r4,r2
  8006c0:	e17ffe17 	ldw	r5,-8(fp)
  8006c4:	e1bfff17 	ldw	r6,-4(fp)
  8006c8:	0800ab00 	call	800ab0 <altera_avalon_jtag_uart_ioctl>
}
  8006cc:	e037883a 	mov	sp,fp
  8006d0:	dfc00117 	ldw	ra,4(sp)
  8006d4:	df000017 	ldw	fp,0(sp)
  8006d8:	dec00204 	addi	sp,sp,8
  8006dc:	f800283a 	ret

008006e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8006e0:	defffb04 	addi	sp,sp,-20
  8006e4:	dfc00415 	stw	ra,16(sp)
  8006e8:	df000315 	stw	fp,12(sp)
  8006ec:	df000304 	addi	fp,sp,12
  8006f0:	e13ffd15 	stw	r4,-12(fp)
  8006f4:	e17ffe15 	stw	r5,-8(fp)
  8006f8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8006fc:	e0bffd17 	ldw	r2,-12(fp)
  800700:	00c00044 	movi	r3,1
  800704:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  800708:	e0bffd17 	ldw	r2,-12(fp)
  80070c:	10800017 	ldw	r2,0(r2)
  800710:	10800104 	addi	r2,r2,4
  800714:	1007883a 	mov	r3,r2
  800718:	e0bffd17 	ldw	r2,-12(fp)
  80071c:	10800817 	ldw	r2,32(r2)
  800720:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  800724:	e0bfff17 	ldw	r2,-4(fp)
  800728:	1009883a 	mov	r4,r2
  80072c:	e17ffd17 	ldw	r5,-12(fp)
  800730:	01802034 	movhi	r6,128
  800734:	3181e604 	addi	r6,r6,1944
  800738:	0802e580 	call	802e58 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80073c:	e0bffd17 	ldw	r2,-12(fp)
  800740:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  800744:	e0bffd17 	ldw	r2,-12(fp)
  800748:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80074c:	00802034 	movhi	r2,128
  800750:	109d6f04 	addi	r2,r2,30140
  800754:	10800017 	ldw	r2,0(r2)
  800758:	1809883a 	mov	r4,r3
  80075c:	100b883a 	mov	r5,r2
  800760:	01802034 	movhi	r6,128
  800764:	31826804 	addi	r6,r6,2464
  800768:	e1fffd17 	ldw	r7,-12(fp)
  80076c:	08028740 	call	802874 <alt_alarm_start>
  800770:	1000040e 	bge	r2,zero,800784 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  800774:	e0fffd17 	ldw	r3,-12(fp)
  800778:	00a00034 	movhi	r2,32768
  80077c:	10bfffc4 	addi	r2,r2,-1
  800780:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  800784:	e037883a 	mov	sp,fp
  800788:	dfc00117 	ldw	ra,4(sp)
  80078c:	df000017 	ldw	fp,0(sp)
  800790:	dec00204 	addi	sp,sp,8
  800794:	f800283a 	ret

00800798 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  800798:	defff704 	addi	sp,sp,-36
  80079c:	df000815 	stw	fp,32(sp)
  8007a0:	df000804 	addi	fp,sp,32
  8007a4:	e13ffe15 	stw	r4,-8(fp)
  8007a8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8007ac:	e0bffe17 	ldw	r2,-8(fp)
  8007b0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  8007b4:	e0bffa17 	ldw	r2,-24(fp)
  8007b8:	10800017 	ldw	r2,0(r2)
  8007bc:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8007c0:	e0bffb17 	ldw	r2,-20(fp)
  8007c4:	10800104 	addi	r2,r2,4
  8007c8:	10800037 	ldwio	r2,0(r2)
  8007cc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8007d0:	e0bffc17 	ldw	r2,-16(fp)
  8007d4:	1080c00c 	andi	r2,r2,768
  8007d8:	1000011e 	bne	r2,zero,8007e0 <altera_avalon_jtag_uart_irq+0x48>
      break;
  8007dc:	00006c06 	br	800990 <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8007e0:	e0bffc17 	ldw	r2,-16(fp)
  8007e4:	1080400c 	andi	r2,r2,256
  8007e8:	10003426 	beq	r2,zero,8008bc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8007ec:	00800074 	movhi	r2,1
  8007f0:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8007f4:	e0bffa17 	ldw	r2,-24(fp)
  8007f8:	10800a17 	ldw	r2,40(r2)
  8007fc:	10800044 	addi	r2,r2,1
  800800:	1081ffcc 	andi	r2,r2,2047
  800804:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  800808:	e0bffa17 	ldw	r2,-24(fp)
  80080c:	10c00b17 	ldw	r3,44(r2)
  800810:	e0bffd17 	ldw	r2,-12(fp)
  800814:	1880011e 	bne	r3,r2,80081c <altera_avalon_jtag_uart_irq+0x84>
          break;
  800818:	00001606 	br	800874 <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80081c:	e0bffb17 	ldw	r2,-20(fp)
  800820:	10800037 	ldwio	r2,0(r2)
  800824:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  800828:	e0bff817 	ldw	r2,-32(fp)
  80082c:	10a0000c 	andi	r2,r2,32768
  800830:	1000011e 	bne	r2,zero,800838 <altera_avalon_jtag_uart_irq+0xa0>
          break;
  800834:	00000f06 	br	800874 <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  800838:	e0bffa17 	ldw	r2,-24(fp)
  80083c:	10800a17 	ldw	r2,40(r2)
  800840:	e0fff817 	ldw	r3,-32(fp)
  800844:	1809883a 	mov	r4,r3
  800848:	e0fffa17 	ldw	r3,-24(fp)
  80084c:	1885883a 	add	r2,r3,r2
  800850:	10800e04 	addi	r2,r2,56
  800854:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800858:	e0bffa17 	ldw	r2,-24(fp)
  80085c:	10800a17 	ldw	r2,40(r2)
  800860:	10800044 	addi	r2,r2,1
  800864:	10c1ffcc 	andi	r3,r2,2047
  800868:	e0bffa17 	ldw	r2,-24(fp)
  80086c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  800870:	003fe006 	br	8007f4 <__alt_data_end+0xff8007f4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  800874:	e0bff817 	ldw	r2,-32(fp)
  800878:	10bfffec 	andhi	r2,r2,65535
  80087c:	10000f26 	beq	r2,zero,8008bc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800880:	e0bffa17 	ldw	r2,-24(fp)
  800884:	10c00817 	ldw	r3,32(r2)
  800888:	00bfff84 	movi	r2,-2
  80088c:	1886703a 	and	r3,r3,r2
  800890:	e0bffa17 	ldw	r2,-24(fp)
  800894:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  800898:	e0bffb17 	ldw	r2,-20(fp)
  80089c:	10800104 	addi	r2,r2,4
  8008a0:	1007883a 	mov	r3,r2
  8008a4:	e0bffa17 	ldw	r2,-24(fp)
  8008a8:	10800817 	ldw	r2,32(r2)
  8008ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8008b0:	e0bffb17 	ldw	r2,-20(fp)
  8008b4:	10800104 	addi	r2,r2,4
  8008b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8008bc:	e0bffc17 	ldw	r2,-16(fp)
  8008c0:	1080800c 	andi	r2,r2,512
  8008c4:	10003126 	beq	r2,zero,80098c <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8008c8:	e0bffc17 	ldw	r2,-16(fp)
  8008cc:	1004d43a 	srli	r2,r2,16
  8008d0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8008d4:	00001406 	br	800928 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8008d8:	e0bffb17 	ldw	r2,-20(fp)
  8008dc:	e0fffa17 	ldw	r3,-24(fp)
  8008e0:	18c00d17 	ldw	r3,52(r3)
  8008e4:	e13ffa17 	ldw	r4,-24(fp)
  8008e8:	20c7883a 	add	r3,r4,r3
  8008ec:	18c20e04 	addi	r3,r3,2104
  8008f0:	18c00003 	ldbu	r3,0(r3)
  8008f4:	18c03fcc 	andi	r3,r3,255
  8008f8:	18c0201c 	xori	r3,r3,128
  8008fc:	18ffe004 	addi	r3,r3,-128
  800900:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800904:	e0bffa17 	ldw	r2,-24(fp)
  800908:	10800d17 	ldw	r2,52(r2)
  80090c:	10800044 	addi	r2,r2,1
  800910:	10c1ffcc 	andi	r3,r2,2047
  800914:	e0bffa17 	ldw	r2,-24(fp)
  800918:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80091c:	e0bff917 	ldw	r2,-28(fp)
  800920:	10bfffc4 	addi	r2,r2,-1
  800924:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  800928:	e0bff917 	ldw	r2,-28(fp)
  80092c:	10000526 	beq	r2,zero,800944 <altera_avalon_jtag_uart_irq+0x1ac>
  800930:	e0bffa17 	ldw	r2,-24(fp)
  800934:	10c00d17 	ldw	r3,52(r2)
  800938:	e0bffa17 	ldw	r2,-24(fp)
  80093c:	10800c17 	ldw	r2,48(r2)
  800940:	18bfe51e 	bne	r3,r2,8008d8 <__alt_data_end+0xff8008d8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  800944:	e0bff917 	ldw	r2,-28(fp)
  800948:	10001026 	beq	r2,zero,80098c <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80094c:	e0bffa17 	ldw	r2,-24(fp)
  800950:	10c00817 	ldw	r3,32(r2)
  800954:	00bfff44 	movi	r2,-3
  800958:	1886703a 	and	r3,r3,r2
  80095c:	e0bffa17 	ldw	r2,-24(fp)
  800960:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800964:	e0bffa17 	ldw	r2,-24(fp)
  800968:	10800017 	ldw	r2,0(r2)
  80096c:	10800104 	addi	r2,r2,4
  800970:	1007883a 	mov	r3,r2
  800974:	e0bffa17 	ldw	r2,-24(fp)
  800978:	10800817 	ldw	r2,32(r2)
  80097c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800980:	e0bffb17 	ldw	r2,-20(fp)
  800984:	10800104 	addi	r2,r2,4
  800988:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80098c:	003f8c06 	br	8007c0 <__alt_data_end+0xff8007c0>
}
  800990:	e037883a 	mov	sp,fp
  800994:	df000017 	ldw	fp,0(sp)
  800998:	dec00104 	addi	sp,sp,4
  80099c:	f800283a 	ret

008009a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8009a0:	defff804 	addi	sp,sp,-32
  8009a4:	df000715 	stw	fp,28(sp)
  8009a8:	df000704 	addi	fp,sp,28
  8009ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8009b0:	e0bffb17 	ldw	r2,-20(fp)
  8009b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8009b8:	e0bff917 	ldw	r2,-28(fp)
  8009bc:	10800017 	ldw	r2,0(r2)
  8009c0:	10800104 	addi	r2,r2,4
  8009c4:	10800037 	ldwio	r2,0(r2)
  8009c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8009cc:	e0bffa17 	ldw	r2,-24(fp)
  8009d0:	1081000c 	andi	r2,r2,1024
  8009d4:	10000b26 	beq	r2,zero,800a04 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8009d8:	e0bff917 	ldw	r2,-28(fp)
  8009dc:	10800017 	ldw	r2,0(r2)
  8009e0:	10800104 	addi	r2,r2,4
  8009e4:	1007883a 	mov	r3,r2
  8009e8:	e0bff917 	ldw	r2,-28(fp)
  8009ec:	10800817 	ldw	r2,32(r2)
  8009f0:	10810014 	ori	r2,r2,1024
  8009f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8009f8:	e0bff917 	ldw	r2,-28(fp)
  8009fc:	10000915 	stw	zero,36(r2)
  800a00:	00000a06 	br	800a2c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  800a04:	e0bff917 	ldw	r2,-28(fp)
  800a08:	10c00917 	ldw	r3,36(r2)
  800a0c:	00a00034 	movhi	r2,32768
  800a10:	10bfff04 	addi	r2,r2,-4
  800a14:	10c00536 	bltu	r2,r3,800a2c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  800a18:	e0bff917 	ldw	r2,-28(fp)
  800a1c:	10800917 	ldw	r2,36(r2)
  800a20:	10c00044 	addi	r3,r2,1
  800a24:	e0bff917 	ldw	r2,-28(fp)
  800a28:	10c00915 	stw	r3,36(r2)
  800a2c:	00802034 	movhi	r2,128
  800a30:	109d6f04 	addi	r2,r2,30140
  800a34:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  800a38:	e037883a 	mov	sp,fp
  800a3c:	df000017 	ldw	fp,0(sp)
  800a40:	dec00104 	addi	sp,sp,4
  800a44:	f800283a 	ret

00800a48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  800a48:	defffd04 	addi	sp,sp,-12
  800a4c:	df000215 	stw	fp,8(sp)
  800a50:	df000204 	addi	fp,sp,8
  800a54:	e13ffe15 	stw	r4,-8(fp)
  800a58:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800a5c:	00000506 	br	800a74 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  800a60:	e0bfff17 	ldw	r2,-4(fp)
  800a64:	1090000c 	andi	r2,r2,16384
  800a68:	10000226 	beq	r2,zero,800a74 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  800a6c:	00bffd44 	movi	r2,-11
  800a70:	00000b06 	br	800aa0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800a74:	e0bffe17 	ldw	r2,-8(fp)
  800a78:	10c00d17 	ldw	r3,52(r2)
  800a7c:	e0bffe17 	ldw	r2,-8(fp)
  800a80:	10800c17 	ldw	r2,48(r2)
  800a84:	18800526 	beq	r3,r2,800a9c <altera_avalon_jtag_uart_close+0x54>
  800a88:	e0bffe17 	ldw	r2,-8(fp)
  800a8c:	10c00917 	ldw	r3,36(r2)
  800a90:	e0bffe17 	ldw	r2,-8(fp)
  800a94:	10800117 	ldw	r2,4(r2)
  800a98:	18bff136 	bltu	r3,r2,800a60 <__alt_data_end+0xff800a60>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  800a9c:	0005883a 	mov	r2,zero
}
  800aa0:	e037883a 	mov	sp,fp
  800aa4:	df000017 	ldw	fp,0(sp)
  800aa8:	dec00104 	addi	sp,sp,4
  800aac:	f800283a 	ret

00800ab0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  800ab0:	defffa04 	addi	sp,sp,-24
  800ab4:	df000515 	stw	fp,20(sp)
  800ab8:	df000504 	addi	fp,sp,20
  800abc:	e13ffd15 	stw	r4,-12(fp)
  800ac0:	e17ffe15 	stw	r5,-8(fp)
  800ac4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  800ac8:	00bff9c4 	movi	r2,-25
  800acc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  800ad0:	e0bffe17 	ldw	r2,-8(fp)
  800ad4:	10da8060 	cmpeqi	r3,r2,27137
  800ad8:	1800031e 	bne	r3,zero,800ae8 <altera_avalon_jtag_uart_ioctl+0x38>
  800adc:	109a80a0 	cmpeqi	r2,r2,27138
  800ae0:	1000191e 	bne	r2,zero,800b48 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  800ae4:	00002806 	br	800b88 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  800ae8:	e0bffd17 	ldw	r2,-12(fp)
  800aec:	10c00117 	ldw	r3,4(r2)
  800af0:	00a00034 	movhi	r2,32768
  800af4:	10bfffc4 	addi	r2,r2,-1
  800af8:	18801226 	beq	r3,r2,800b44 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
  800afc:	e0bfff17 	ldw	r2,-4(fp)
  800b00:	10800017 	ldw	r2,0(r2)
  800b04:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  800b08:	e0bffc17 	ldw	r2,-16(fp)
  800b0c:	10800090 	cmplti	r2,r2,2
  800b10:	1000061e 	bne	r2,zero,800b2c <altera_avalon_jtag_uart_ioctl+0x7c>
  800b14:	e0fffc17 	ldw	r3,-16(fp)
  800b18:	00a00034 	movhi	r2,32768
  800b1c:	10bfffc4 	addi	r2,r2,-1
  800b20:	18800226 	beq	r3,r2,800b2c <altera_avalon_jtag_uart_ioctl+0x7c>
  800b24:	e0bffc17 	ldw	r2,-16(fp)
  800b28:	00000206 	br	800b34 <altera_avalon_jtag_uart_ioctl+0x84>
  800b2c:	00a00034 	movhi	r2,32768
  800b30:	10bfff84 	addi	r2,r2,-2
  800b34:	e0fffd17 	ldw	r3,-12(fp)
  800b38:	18800115 	stw	r2,4(r3)
      rc = 0;
  800b3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800b40:	00001106 	br	800b88 <altera_avalon_jtag_uart_ioctl+0xd8>
  800b44:	00001006 	br	800b88 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  800b48:	e0bffd17 	ldw	r2,-12(fp)
  800b4c:	10c00117 	ldw	r3,4(r2)
  800b50:	00a00034 	movhi	r2,32768
  800b54:	10bfffc4 	addi	r2,r2,-1
  800b58:	18800a26 	beq	r3,r2,800b84 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  800b5c:	e0bffd17 	ldw	r2,-12(fp)
  800b60:	10c00917 	ldw	r3,36(r2)
  800b64:	e0bffd17 	ldw	r2,-12(fp)
  800b68:	10800117 	ldw	r2,4(r2)
  800b6c:	1885803a 	cmpltu	r2,r3,r2
  800b70:	10c03fcc 	andi	r3,r2,255
  800b74:	e0bfff17 	ldw	r2,-4(fp)
  800b78:	10c00015 	stw	r3,0(r2)
      rc = 0;
  800b7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800b80:	00000006 	br	800b84 <altera_avalon_jtag_uart_ioctl+0xd4>
  800b84:	0001883a 	nop

  default:
    break;
  }

  return rc;
  800b88:	e0bffb17 	ldw	r2,-20(fp)
}
  800b8c:	e037883a 	mov	sp,fp
  800b90:	df000017 	ldw	fp,0(sp)
  800b94:	dec00104 	addi	sp,sp,4
  800b98:	f800283a 	ret

00800b9c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  800b9c:	defff304 	addi	sp,sp,-52
  800ba0:	dfc00c15 	stw	ra,48(sp)
  800ba4:	df000b15 	stw	fp,44(sp)
  800ba8:	df000b04 	addi	fp,sp,44
  800bac:	e13ffc15 	stw	r4,-16(fp)
  800bb0:	e17ffd15 	stw	r5,-12(fp)
  800bb4:	e1bffe15 	stw	r6,-8(fp)
  800bb8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  800bbc:	e0bffd17 	ldw	r2,-12(fp)
  800bc0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800bc4:	00004906 	br	800cec <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  800bc8:	e0bffc17 	ldw	r2,-16(fp)
  800bcc:	10800a17 	ldw	r2,40(r2)
  800bd0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  800bd4:	e0bffc17 	ldw	r2,-16(fp)
  800bd8:	10800b17 	ldw	r2,44(r2)
  800bdc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  800be0:	e0fff717 	ldw	r3,-36(fp)
  800be4:	e0bff817 	ldw	r2,-32(fp)
  800be8:	18800536 	bltu	r3,r2,800c00 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  800bec:	e0fff717 	ldw	r3,-36(fp)
  800bf0:	e0bff817 	ldw	r2,-32(fp)
  800bf4:	1885c83a 	sub	r2,r3,r2
  800bf8:	e0bff615 	stw	r2,-40(fp)
  800bfc:	00000406 	br	800c10 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  800c00:	00c20004 	movi	r3,2048
  800c04:	e0bff817 	ldw	r2,-32(fp)
  800c08:	1885c83a 	sub	r2,r3,r2
  800c0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  800c10:	e0bff617 	ldw	r2,-40(fp)
  800c14:	1000011e 	bne	r2,zero,800c1c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
  800c18:	00001d06 	br	800c90 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
  800c1c:	e0fffe17 	ldw	r3,-8(fp)
  800c20:	e0bff617 	ldw	r2,-40(fp)
  800c24:	1880022e 	bgeu	r3,r2,800c30 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  800c28:	e0bffe17 	ldw	r2,-8(fp)
  800c2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  800c30:	e0bff817 	ldw	r2,-32(fp)
  800c34:	10800e04 	addi	r2,r2,56
  800c38:	e0fffc17 	ldw	r3,-16(fp)
  800c3c:	1885883a 	add	r2,r3,r2
  800c40:	e13ff517 	ldw	r4,-44(fp)
  800c44:	100b883a 	mov	r5,r2
  800c48:	e1bff617 	ldw	r6,-40(fp)
  800c4c:	0803a680 	call	803a68 <memcpy>
      ptr   += n;
  800c50:	e0fff517 	ldw	r3,-44(fp)
  800c54:	e0bff617 	ldw	r2,-40(fp)
  800c58:	1885883a 	add	r2,r3,r2
  800c5c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  800c60:	e0fffe17 	ldw	r3,-8(fp)
  800c64:	e0bff617 	ldw	r2,-40(fp)
  800c68:	1885c83a 	sub	r2,r3,r2
  800c6c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800c70:	e0fff817 	ldw	r3,-32(fp)
  800c74:	e0bff617 	ldw	r2,-40(fp)
  800c78:	1885883a 	add	r2,r3,r2
  800c7c:	10c1ffcc 	andi	r3,r2,2047
  800c80:	e0bffc17 	ldw	r2,-16(fp)
  800c84:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  800c88:	e0bffe17 	ldw	r2,-8(fp)
  800c8c:	00bfce16 	blt	zero,r2,800bc8 <__alt_data_end+0xff800bc8>

    /* If we read any data then return it */
    if (ptr != buffer)
  800c90:	e0fff517 	ldw	r3,-44(fp)
  800c94:	e0bffd17 	ldw	r2,-12(fp)
  800c98:	18800126 	beq	r3,r2,800ca0 <altera_avalon_jtag_uart_read+0x104>
      break;
  800c9c:	00001506 	br	800cf4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  800ca0:	e0bfff17 	ldw	r2,-4(fp)
  800ca4:	1090000c 	andi	r2,r2,16384
  800ca8:	10000126 	beq	r2,zero,800cb0 <altera_avalon_jtag_uart_read+0x114>
      break;
  800cac:	00001106 	br	800cf4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  800cb0:	0001883a 	nop
  800cb4:	e0bffc17 	ldw	r2,-16(fp)
  800cb8:	10c00a17 	ldw	r3,40(r2)
  800cbc:	e0bff717 	ldw	r2,-36(fp)
  800cc0:	1880051e 	bne	r3,r2,800cd8 <altera_avalon_jtag_uart_read+0x13c>
  800cc4:	e0bffc17 	ldw	r2,-16(fp)
  800cc8:	10c00917 	ldw	r3,36(r2)
  800ccc:	e0bffc17 	ldw	r2,-16(fp)
  800cd0:	10800117 	ldw	r2,4(r2)
  800cd4:	18bff736 	bltu	r3,r2,800cb4 <__alt_data_end+0xff800cb4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  800cd8:	e0bffc17 	ldw	r2,-16(fp)
  800cdc:	10c00a17 	ldw	r3,40(r2)
  800ce0:	e0bff717 	ldw	r2,-36(fp)
  800ce4:	1880011e 	bne	r3,r2,800cec <altera_avalon_jtag_uart_read+0x150>
      break;
  800ce8:	00000206 	br	800cf4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800cec:	e0bffe17 	ldw	r2,-8(fp)
  800cf0:	00bfb516 	blt	zero,r2,800bc8 <__alt_data_end+0xff800bc8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  800cf4:	e0fff517 	ldw	r3,-44(fp)
  800cf8:	e0bffd17 	ldw	r2,-12(fp)
  800cfc:	18801826 	beq	r3,r2,800d60 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800d00:	0005303a 	rdctl	r2,status
  800d04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800d08:	e0fffa17 	ldw	r3,-24(fp)
  800d0c:	00bfff84 	movi	r2,-2
  800d10:	1884703a 	and	r2,r3,r2
  800d14:	1001703a 	wrctl	status,r2
  
  return context;
  800d18:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  800d1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800d20:	e0bffc17 	ldw	r2,-16(fp)
  800d24:	10800817 	ldw	r2,32(r2)
  800d28:	10c00054 	ori	r3,r2,1
  800d2c:	e0bffc17 	ldw	r2,-16(fp)
  800d30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800d34:	e0bffc17 	ldw	r2,-16(fp)
  800d38:	10800017 	ldw	r2,0(r2)
  800d3c:	10800104 	addi	r2,r2,4
  800d40:	1007883a 	mov	r3,r2
  800d44:	e0bffc17 	ldw	r2,-16(fp)
  800d48:	10800817 	ldw	r2,32(r2)
  800d4c:	18800035 	stwio	r2,0(r3)
  800d50:	e0bff917 	ldw	r2,-28(fp)
  800d54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800d58:	e0bffb17 	ldw	r2,-20(fp)
  800d5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  800d60:	e0fff517 	ldw	r3,-44(fp)
  800d64:	e0bffd17 	ldw	r2,-12(fp)
  800d68:	18800426 	beq	r3,r2,800d7c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
  800d6c:	e0fff517 	ldw	r3,-44(fp)
  800d70:	e0bffd17 	ldw	r2,-12(fp)
  800d74:	1885c83a 	sub	r2,r3,r2
  800d78:	00000606 	br	800d94 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
  800d7c:	e0bfff17 	ldw	r2,-4(fp)
  800d80:	1090000c 	andi	r2,r2,16384
  800d84:	10000226 	beq	r2,zero,800d90 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
  800d88:	00bffd44 	movi	r2,-11
  800d8c:	00000106 	br	800d94 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
  800d90:	00bffec4 	movi	r2,-5
}
  800d94:	e037883a 	mov	sp,fp
  800d98:	dfc00117 	ldw	ra,4(sp)
  800d9c:	df000017 	ldw	fp,0(sp)
  800da0:	dec00204 	addi	sp,sp,8
  800da4:	f800283a 	ret

00800da8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  800da8:	defff304 	addi	sp,sp,-52
  800dac:	dfc00c15 	stw	ra,48(sp)
  800db0:	df000b15 	stw	fp,44(sp)
  800db4:	df000b04 	addi	fp,sp,44
  800db8:	e13ffc15 	stw	r4,-16(fp)
  800dbc:	e17ffd15 	stw	r5,-12(fp)
  800dc0:	e1bffe15 	stw	r6,-8(fp)
  800dc4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  800dc8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  800dcc:	e0bffd17 	ldw	r2,-12(fp)
  800dd0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  800dd4:	00003806 	br	800eb8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  800dd8:	e0bffc17 	ldw	r2,-16(fp)
  800ddc:	10800c17 	ldw	r2,48(r2)
  800de0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
  800de4:	e0bffc17 	ldw	r2,-16(fp)
  800de8:	10800d17 	ldw	r2,52(r2)
  800dec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  800df0:	e0fff817 	ldw	r3,-32(fp)
  800df4:	e0bff517 	ldw	r2,-44(fp)
  800df8:	1880062e 	bgeu	r3,r2,800e14 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  800dfc:	e0fff517 	ldw	r3,-44(fp)
  800e00:	e0bff817 	ldw	r2,-32(fp)
  800e04:	1885c83a 	sub	r2,r3,r2
  800e08:	10bfffc4 	addi	r2,r2,-1
  800e0c:	e0bff615 	stw	r2,-40(fp)
  800e10:	00000b06 	br	800e40 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  800e14:	e0bff517 	ldw	r2,-44(fp)
  800e18:	10000526 	beq	r2,zero,800e30 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  800e1c:	00c20004 	movi	r3,2048
  800e20:	e0bff817 	ldw	r2,-32(fp)
  800e24:	1885c83a 	sub	r2,r3,r2
  800e28:	e0bff615 	stw	r2,-40(fp)
  800e2c:	00000406 	br	800e40 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  800e30:	00c1ffc4 	movi	r3,2047
  800e34:	e0bff817 	ldw	r2,-32(fp)
  800e38:	1885c83a 	sub	r2,r3,r2
  800e3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  800e40:	e0bff617 	ldw	r2,-40(fp)
  800e44:	1000011e 	bne	r2,zero,800e4c <altera_avalon_jtag_uart_write+0xa4>
        break;
  800e48:	00001d06 	br	800ec0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
  800e4c:	e0fffe17 	ldw	r3,-8(fp)
  800e50:	e0bff617 	ldw	r2,-40(fp)
  800e54:	1880022e 	bgeu	r3,r2,800e60 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
  800e58:	e0bffe17 	ldw	r2,-8(fp)
  800e5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  800e60:	e0bff817 	ldw	r2,-32(fp)
  800e64:	10820e04 	addi	r2,r2,2104
  800e68:	e0fffc17 	ldw	r3,-16(fp)
  800e6c:	1885883a 	add	r2,r3,r2
  800e70:	1009883a 	mov	r4,r2
  800e74:	e17ffd17 	ldw	r5,-12(fp)
  800e78:	e1bff617 	ldw	r6,-40(fp)
  800e7c:	0803a680 	call	803a68 <memcpy>
      ptr   += n;
  800e80:	e0fffd17 	ldw	r3,-12(fp)
  800e84:	e0bff617 	ldw	r2,-40(fp)
  800e88:	1885883a 	add	r2,r3,r2
  800e8c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  800e90:	e0fffe17 	ldw	r3,-8(fp)
  800e94:	e0bff617 	ldw	r2,-40(fp)
  800e98:	1885c83a 	sub	r2,r3,r2
  800e9c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800ea0:	e0fff817 	ldw	r3,-32(fp)
  800ea4:	e0bff617 	ldw	r2,-40(fp)
  800ea8:	1885883a 	add	r2,r3,r2
  800eac:	10c1ffcc 	andi	r3,r2,2047
  800eb0:	e0bffc17 	ldw	r2,-16(fp)
  800eb4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  800eb8:	e0bffe17 	ldw	r2,-8(fp)
  800ebc:	00bfc616 	blt	zero,r2,800dd8 <__alt_data_end+0xff800dd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800ec0:	0005303a 	rdctl	r2,status
  800ec4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800ec8:	e0fffa17 	ldw	r3,-24(fp)
  800ecc:	00bfff84 	movi	r2,-2
  800ed0:	1884703a 	and	r2,r3,r2
  800ed4:	1001703a 	wrctl	status,r2
  
  return context;
  800ed8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  800edc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  800ee0:	e0bffc17 	ldw	r2,-16(fp)
  800ee4:	10800817 	ldw	r2,32(r2)
  800ee8:	10c00094 	ori	r3,r2,2
  800eec:	e0bffc17 	ldw	r2,-16(fp)
  800ef0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800ef4:	e0bffc17 	ldw	r2,-16(fp)
  800ef8:	10800017 	ldw	r2,0(r2)
  800efc:	10800104 	addi	r2,r2,4
  800f00:	1007883a 	mov	r3,r2
  800f04:	e0bffc17 	ldw	r2,-16(fp)
  800f08:	10800817 	ldw	r2,32(r2)
  800f0c:	18800035 	stwio	r2,0(r3)
  800f10:	e0bff917 	ldw	r2,-28(fp)
  800f14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800f18:	e0bffb17 	ldw	r2,-20(fp)
  800f1c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  800f20:	e0bffe17 	ldw	r2,-8(fp)
  800f24:	0080120e 	bge	zero,r2,800f70 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  800f28:	e0bfff17 	ldw	r2,-4(fp)
  800f2c:	1090000c 	andi	r2,r2,16384
  800f30:	10000126 	beq	r2,zero,800f38 <altera_avalon_jtag_uart_write+0x190>
        break;
  800f34:	00001006 	br	800f78 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  800f38:	0001883a 	nop
  800f3c:	e0bffc17 	ldw	r2,-16(fp)
  800f40:	10c00d17 	ldw	r3,52(r2)
  800f44:	e0bff517 	ldw	r2,-44(fp)
  800f48:	1880051e 	bne	r3,r2,800f60 <altera_avalon_jtag_uart_write+0x1b8>
  800f4c:	e0bffc17 	ldw	r2,-16(fp)
  800f50:	10c00917 	ldw	r3,36(r2)
  800f54:	e0bffc17 	ldw	r2,-16(fp)
  800f58:	10800117 	ldw	r2,4(r2)
  800f5c:	18bff736 	bltu	r3,r2,800f3c <__alt_data_end+0xff800f3c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  800f60:	e0bffc17 	ldw	r2,-16(fp)
  800f64:	10800917 	ldw	r2,36(r2)
  800f68:	10000126 	beq	r2,zero,800f70 <altera_avalon_jtag_uart_write+0x1c8>
         break;
  800f6c:	00000206 	br	800f78 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
  800f70:	e0bffe17 	ldw	r2,-8(fp)
  800f74:	00bf9716 	blt	zero,r2,800dd4 <__alt_data_end+0xff800dd4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  800f78:	e0fffd17 	ldw	r3,-12(fp)
  800f7c:	e0bff717 	ldw	r2,-36(fp)
  800f80:	18800426 	beq	r3,r2,800f94 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
  800f84:	e0fffd17 	ldw	r3,-12(fp)
  800f88:	e0bff717 	ldw	r2,-36(fp)
  800f8c:	1885c83a 	sub	r2,r3,r2
  800f90:	00000606 	br	800fac <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
  800f94:	e0bfff17 	ldw	r2,-4(fp)
  800f98:	1090000c 	andi	r2,r2,16384
  800f9c:	10000226 	beq	r2,zero,800fa8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
  800fa0:	00bffd44 	movi	r2,-11
  800fa4:	00000106 	br	800fac <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  800fa8:	00bffec4 	movi	r2,-5
}
  800fac:	e037883a 	mov	sp,fp
  800fb0:	dfc00117 	ldw	ra,4(sp)
  800fb4:	df000017 	ldw	fp,0(sp)
  800fb8:	dec00204 	addi	sp,sp,8
  800fbc:	f800283a 	ret

00800fc0 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  800fc0:	defffa04 	addi	sp,sp,-24
  800fc4:	dfc00515 	stw	ra,20(sp)
  800fc8:	df000415 	stw	fp,16(sp)
  800fcc:	df000404 	addi	fp,sp,16
  800fd0:	e13ffe15 	stw	r4,-8(fp)
  800fd4:	2805883a 	mov	r2,r5
  800fd8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  800fdc:	e0bffe17 	ldw	r2,-8(fp)
  800fe0:	10800017 	ldw	r2,0(r2)
  800fe4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  800fe8:	008003f4 	movhi	r2,15
  800fec:	10909004 	addi	r2,r2,16960
  800ff0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  800ff4:	e0bffe17 	ldw	r2,-8(fp)
  800ff8:	10800803 	ldbu	r2,32(r2)
  800ffc:	10803fcc 	andi	r2,r2,255
  801000:	1080201c 	xori	r2,r2,128
  801004:	10bfe004 	addi	r2,r2,-128
  801008:	10000126 	beq	r2,zero,801010 <lcd_write_command+0x50>
    return;
  80100c:	00001406 	br	801060 <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801010:	00000906 	br	801038 <lcd_write_command+0x78>
    if (--i == 0)
  801014:	e0bffc17 	ldw	r2,-16(fp)
  801018:	10bfffc4 	addi	r2,r2,-1
  80101c:	e0bffc15 	stw	r2,-16(fp)
  801020:	e0bffc17 	ldw	r2,-16(fp)
  801024:	1000041e 	bne	r2,zero,801038 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  801028:	e0bffe17 	ldw	r2,-8(fp)
  80102c:	00c00044 	movi	r3,1
  801030:	10c00805 	stb	r3,32(r2)
      return;
  801034:	00000a06 	br	801060 <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801038:	e0bffd17 	ldw	r2,-12(fp)
  80103c:	10800104 	addi	r2,r2,4
  801040:	10800037 	ldwio	r2,0(r2)
  801044:	1080200c 	andi	r2,r2,128
  801048:	103ff21e 	bne	r2,zero,801014 <__alt_data_end+0xff801014>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80104c:	01001904 	movi	r4,100
  801050:	08034780 	call	803478 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  801054:	e0bffd17 	ldw	r2,-12(fp)
  801058:	e0ffff03 	ldbu	r3,-4(fp)
  80105c:	10c00035 	stwio	r3,0(r2)
}
  801060:	e037883a 	mov	sp,fp
  801064:	dfc00117 	ldw	ra,4(sp)
  801068:	df000017 	ldw	fp,0(sp)
  80106c:	dec00204 	addi	sp,sp,8
  801070:	f800283a 	ret

00801074 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  801074:	defffa04 	addi	sp,sp,-24
  801078:	dfc00515 	stw	ra,20(sp)
  80107c:	df000415 	stw	fp,16(sp)
  801080:	df000404 	addi	fp,sp,16
  801084:	e13ffe15 	stw	r4,-8(fp)
  801088:	2805883a 	mov	r2,r5
  80108c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  801090:	e0bffe17 	ldw	r2,-8(fp)
  801094:	10800017 	ldw	r2,0(r2)
  801098:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80109c:	008003f4 	movhi	r2,15
  8010a0:	10909004 	addi	r2,r2,16960
  8010a4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8010a8:	e0bffe17 	ldw	r2,-8(fp)
  8010ac:	10800803 	ldbu	r2,32(r2)
  8010b0:	10803fcc 	andi	r2,r2,255
  8010b4:	1080201c 	xori	r2,r2,128
  8010b8:	10bfe004 	addi	r2,r2,-128
  8010bc:	10000126 	beq	r2,zero,8010c4 <lcd_write_data+0x50>
    return;
  8010c0:	00001c06 	br	801134 <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8010c4:	00000906 	br	8010ec <lcd_write_data+0x78>
    if (--i == 0)
  8010c8:	e0bffc17 	ldw	r2,-16(fp)
  8010cc:	10bfffc4 	addi	r2,r2,-1
  8010d0:	e0bffc15 	stw	r2,-16(fp)
  8010d4:	e0bffc17 	ldw	r2,-16(fp)
  8010d8:	1000041e 	bne	r2,zero,8010ec <lcd_write_data+0x78>
    {
      sp->broken = 1;
  8010dc:	e0bffe17 	ldw	r2,-8(fp)
  8010e0:	00c00044 	movi	r3,1
  8010e4:	10c00805 	stb	r3,32(r2)
      return;
  8010e8:	00001206 	br	801134 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8010ec:	e0bffd17 	ldw	r2,-12(fp)
  8010f0:	10800104 	addi	r2,r2,4
  8010f4:	10800037 	ldwio	r2,0(r2)
  8010f8:	1080200c 	andi	r2,r2,128
  8010fc:	103ff21e 	bne	r2,zero,8010c8 <__alt_data_end+0xff8010c8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801100:	01001904 	movi	r4,100
  801104:	08034780 	call	803478 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  801108:	e0bffd17 	ldw	r2,-12(fp)
  80110c:	10800204 	addi	r2,r2,8
  801110:	1007883a 	mov	r3,r2
  801114:	e0bfff03 	ldbu	r2,-4(fp)
  801118:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80111c:	e0bffe17 	ldw	r2,-8(fp)
  801120:	108008c3 	ldbu	r2,35(r2)
  801124:	10800044 	addi	r2,r2,1
  801128:	1007883a 	mov	r3,r2
  80112c:	e0bffe17 	ldw	r2,-8(fp)
  801130:	10c008c5 	stb	r3,35(r2)
}
  801134:	e037883a 	mov	sp,fp
  801138:	dfc00117 	ldw	ra,4(sp)
  80113c:	df000017 	ldw	fp,0(sp)
  801140:	dec00204 	addi	sp,sp,8
  801144:	f800283a 	ret

00801148 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  801148:	defffc04 	addi	sp,sp,-16
  80114c:	dfc00315 	stw	ra,12(sp)
  801150:	df000215 	stw	fp,8(sp)
  801154:	df000204 	addi	fp,sp,8
  801158:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80115c:	e13fff17 	ldw	r4,-4(fp)
  801160:	01400044 	movi	r5,1
  801164:	0800fc00 	call	800fc0 <lcd_write_command>

  sp->x = 0;
  801168:	e0bfff17 	ldw	r2,-4(fp)
  80116c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  801170:	e0bfff17 	ldw	r2,-4(fp)
  801174:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  801178:	e0bfff17 	ldw	r2,-4(fp)
  80117c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801180:	e03ffe15 	stw	zero,-8(fp)
  801184:	00001b06 	br	8011f4 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  801188:	e0bffe17 	ldw	r2,-8(fp)
  80118c:	108018e4 	muli	r2,r2,99
  801190:	10801004 	addi	r2,r2,64
  801194:	e0ffff17 	ldw	r3,-4(fp)
  801198:	1885883a 	add	r2,r3,r2
  80119c:	1009883a 	mov	r4,r2
  8011a0:	01400804 	movi	r5,32
  8011a4:	01801444 	movi	r6,81
  8011a8:	0803ba00 	call	803ba0 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8011ac:	e0bffe17 	ldw	r2,-8(fp)
  8011b0:	108018e4 	muli	r2,r2,99
  8011b4:	10800c04 	addi	r2,r2,48
  8011b8:	e0ffff17 	ldw	r3,-4(fp)
  8011bc:	1885883a 	add	r2,r3,r2
  8011c0:	1009883a 	mov	r4,r2
  8011c4:	01400804 	movi	r5,32
  8011c8:	01800404 	movi	r6,16
  8011cc:	0803ba00 	call	803ba0 <memset>
    sp->line[y].width = 0;
  8011d0:	e0ffff17 	ldw	r3,-4(fp)
  8011d4:	e0bffe17 	ldw	r2,-8(fp)
  8011d8:	108018e4 	muli	r2,r2,99
  8011dc:	10802404 	addi	r2,r2,144
  8011e0:	1885883a 	add	r2,r3,r2
  8011e4:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8011e8:	e0bffe17 	ldw	r2,-8(fp)
  8011ec:	10800044 	addi	r2,r2,1
  8011f0:	e0bffe15 	stw	r2,-8(fp)
  8011f4:	e0bffe17 	ldw	r2,-8(fp)
  8011f8:	10800090 	cmplti	r2,r2,2
  8011fc:	103fe21e 	bne	r2,zero,801188 <__alt_data_end+0xff801188>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  801200:	e037883a 	mov	sp,fp
  801204:	dfc00117 	ldw	ra,4(sp)
  801208:	df000017 	ldw	fp,0(sp)
  80120c:	dec00204 	addi	sp,sp,8
  801210:	f800283a 	ret

00801214 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  801214:	defff704 	addi	sp,sp,-36
  801218:	dfc00815 	stw	ra,32(sp)
  80121c:	df000715 	stw	fp,28(sp)
  801220:	df000704 	addi	fp,sp,28
  801224:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  801228:	e0bfff17 	ldw	r2,-4(fp)
  80122c:	10800943 	ldbu	r2,37(r2)
  801230:	10803fcc 	andi	r2,r2,255
  801234:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801238:	e03ff915 	stw	zero,-28(fp)
  80123c:	00006706 	br	8013dc <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  801240:	e0ffff17 	ldw	r3,-4(fp)
  801244:	e0bff917 	ldw	r2,-28(fp)
  801248:	108018e4 	muli	r2,r2,99
  80124c:	10802404 	addi	r2,r2,144
  801250:	1885883a 	add	r2,r3,r2
  801254:	10800043 	ldbu	r2,1(r2)
  801258:	10803fcc 	andi	r2,r2,255
  80125c:	1080201c 	xori	r2,r2,128
  801260:	10bfe004 	addi	r2,r2,-128
  801264:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  801268:	e0ffff17 	ldw	r3,-4(fp)
  80126c:	e0bff917 	ldw	r2,-28(fp)
  801270:	108018e4 	muli	r2,r2,99
  801274:	10802404 	addi	r2,r2,144
  801278:	1885883a 	add	r2,r3,r2
  80127c:	10800083 	ldbu	r2,2(r2)
  801280:	10c03fcc 	andi	r3,r2,255
  801284:	e0bffc17 	ldw	r2,-16(fp)
  801288:	1885383a 	mul	r2,r3,r2
  80128c:	1005d23a 	srai	r2,r2,8
  801290:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  801294:	e0fffb17 	ldw	r3,-20(fp)
  801298:	e0bffd17 	ldw	r2,-12(fp)
  80129c:	18800116 	blt	r3,r2,8012a4 <lcd_repaint_screen+0x90>
      offset = 0;
  8012a0:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8012a4:	e03ffa15 	stw	zero,-24(fp)
  8012a8:	00004606 	br	8013c4 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8012ac:	e0fffa17 	ldw	r3,-24(fp)
  8012b0:	e0bffb17 	ldw	r2,-20(fp)
  8012b4:	1885883a 	add	r2,r3,r2
  8012b8:	1009883a 	mov	r4,r2
  8012bc:	e17ffd17 	ldw	r5,-12(fp)
  8012c0:	08040c40 	call	8040c4 <__modsi3>
  8012c4:	1009883a 	mov	r4,r2
  8012c8:	e0ffff17 	ldw	r3,-4(fp)
  8012cc:	e0bff917 	ldw	r2,-28(fp)
  8012d0:	108018e4 	muli	r2,r2,99
  8012d4:	1885883a 	add	r2,r3,r2
  8012d8:	1105883a 	add	r2,r2,r4
  8012dc:	10801004 	addi	r2,r2,64
  8012e0:	10800003 	ldbu	r2,0(r2)
  8012e4:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8012e8:	e0ffff17 	ldw	r3,-4(fp)
  8012ec:	e0bff917 	ldw	r2,-28(fp)
  8012f0:	108018e4 	muli	r2,r2,99
  8012f4:	1887883a 	add	r3,r3,r2
  8012f8:	e0bffa17 	ldw	r2,-24(fp)
  8012fc:	1885883a 	add	r2,r3,r2
  801300:	10800c04 	addi	r2,r2,48
  801304:	10800003 	ldbu	r2,0(r2)
  801308:	10c03fcc 	andi	r3,r2,255
  80130c:	18c0201c 	xori	r3,r3,128
  801310:	18ffe004 	addi	r3,r3,-128
  801314:	e0bffe07 	ldb	r2,-8(fp)
  801318:	18802726 	beq	r3,r2,8013b8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80131c:	e0fff917 	ldw	r3,-28(fp)
  801320:	d0a00004 	addi	r2,gp,-32768
  801324:	1885883a 	add	r2,r3,r2
  801328:	10800003 	ldbu	r2,0(r2)
  80132c:	1007883a 	mov	r3,r2
  801330:	e0bffa17 	ldw	r2,-24(fp)
  801334:	1885883a 	add	r2,r3,r2
  801338:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80133c:	e0fffe43 	ldbu	r3,-7(fp)
  801340:	e0bfff17 	ldw	r2,-4(fp)
  801344:	108008c3 	ldbu	r2,35(r2)
  801348:	10803fcc 	andi	r2,r2,255
  80134c:	1080201c 	xori	r2,r2,128
  801350:	10bfe004 	addi	r2,r2,-128
  801354:	18800a26 	beq	r3,r2,801380 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  801358:	e0fffe43 	ldbu	r3,-7(fp)
  80135c:	00bfe004 	movi	r2,-128
  801360:	1884b03a 	or	r2,r3,r2
  801364:	10803fcc 	andi	r2,r2,255
  801368:	e13fff17 	ldw	r4,-4(fp)
  80136c:	100b883a 	mov	r5,r2
  801370:	0800fc00 	call	800fc0 <lcd_write_command>
          sp->address = address;
  801374:	e0fffe43 	ldbu	r3,-7(fp)
  801378:	e0bfff17 	ldw	r2,-4(fp)
  80137c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  801380:	e0bffe03 	ldbu	r2,-8(fp)
  801384:	10803fcc 	andi	r2,r2,255
  801388:	e13fff17 	ldw	r4,-4(fp)
  80138c:	100b883a 	mov	r5,r2
  801390:	08010740 	call	801074 <lcd_write_data>
        sp->line[y].visible[x] = c;
  801394:	e0ffff17 	ldw	r3,-4(fp)
  801398:	e0bff917 	ldw	r2,-28(fp)
  80139c:	108018e4 	muli	r2,r2,99
  8013a0:	1887883a 	add	r3,r3,r2
  8013a4:	e0bffa17 	ldw	r2,-24(fp)
  8013a8:	1885883a 	add	r2,r3,r2
  8013ac:	10800c04 	addi	r2,r2,48
  8013b0:	e0fffe03 	ldbu	r3,-8(fp)
  8013b4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8013b8:	e0bffa17 	ldw	r2,-24(fp)
  8013bc:	10800044 	addi	r2,r2,1
  8013c0:	e0bffa15 	stw	r2,-24(fp)
  8013c4:	e0bffa17 	ldw	r2,-24(fp)
  8013c8:	10800410 	cmplti	r2,r2,16
  8013cc:	103fb71e 	bne	r2,zero,8012ac <__alt_data_end+0xff8012ac>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8013d0:	e0bff917 	ldw	r2,-28(fp)
  8013d4:	10800044 	addi	r2,r2,1
  8013d8:	e0bff915 	stw	r2,-28(fp)
  8013dc:	e0bff917 	ldw	r2,-28(fp)
  8013e0:	10800090 	cmplti	r2,r2,2
  8013e4:	103f961e 	bne	r2,zero,801240 <__alt_data_end+0xff801240>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8013e8:	e037883a 	mov	sp,fp
  8013ec:	dfc00117 	ldw	ra,4(sp)
  8013f0:	df000017 	ldw	fp,0(sp)
  8013f4:	dec00204 	addi	sp,sp,8
  8013f8:	f800283a 	ret

008013fc <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8013fc:	defffc04 	addi	sp,sp,-16
  801400:	dfc00315 	stw	ra,12(sp)
  801404:	df000215 	stw	fp,8(sp)
  801408:	df000204 	addi	fp,sp,8
  80140c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801410:	e03ffe15 	stw	zero,-8(fp)
  801414:	00001d06 	br	80148c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  801418:	e0bffe17 	ldw	r2,-8(fp)
  80141c:	00800f16 	blt	zero,r2,80145c <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  801420:	e0bffe17 	ldw	r2,-8(fp)
  801424:	108018e4 	muli	r2,r2,99
  801428:	10801004 	addi	r2,r2,64
  80142c:	e0ffff17 	ldw	r3,-4(fp)
  801430:	1889883a 	add	r4,r3,r2
  801434:	e0bffe17 	ldw	r2,-8(fp)
  801438:	10800044 	addi	r2,r2,1
  80143c:	108018e4 	muli	r2,r2,99
  801440:	10801004 	addi	r2,r2,64
  801444:	e0ffff17 	ldw	r3,-4(fp)
  801448:	1885883a 	add	r2,r3,r2
  80144c:	100b883a 	mov	r5,r2
  801450:	01801404 	movi	r6,80
  801454:	0803a680 	call	803a68 <memcpy>
  801458:	00000906 	br	801480 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80145c:	e0bffe17 	ldw	r2,-8(fp)
  801460:	108018e4 	muli	r2,r2,99
  801464:	10801004 	addi	r2,r2,64
  801468:	e0ffff17 	ldw	r3,-4(fp)
  80146c:	1885883a 	add	r2,r3,r2
  801470:	1009883a 	mov	r4,r2
  801474:	01400804 	movi	r5,32
  801478:	01801404 	movi	r6,80
  80147c:	0803ba00 	call	803ba0 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801480:	e0bffe17 	ldw	r2,-8(fp)
  801484:	10800044 	addi	r2,r2,1
  801488:	e0bffe15 	stw	r2,-8(fp)
  80148c:	e0bffe17 	ldw	r2,-8(fp)
  801490:	10800090 	cmplti	r2,r2,2
  801494:	103fe01e 	bne	r2,zero,801418 <__alt_data_end+0xff801418>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  801498:	e0bfff17 	ldw	r2,-4(fp)
  80149c:	10800883 	ldbu	r2,34(r2)
  8014a0:	10bfffc4 	addi	r2,r2,-1
  8014a4:	1007883a 	mov	r3,r2
  8014a8:	e0bfff17 	ldw	r2,-4(fp)
  8014ac:	10c00885 	stb	r3,34(r2)
}
  8014b0:	e037883a 	mov	sp,fp
  8014b4:	dfc00117 	ldw	ra,4(sp)
  8014b8:	df000017 	ldw	fp,0(sp)
  8014bc:	dec00204 	addi	sp,sp,8
  8014c0:	f800283a 	ret

008014c4 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8014c4:	defff904 	addi	sp,sp,-28
  8014c8:	dfc00615 	stw	ra,24(sp)
  8014cc:	df000515 	stw	fp,20(sp)
  8014d0:	df000504 	addi	fp,sp,20
  8014d4:	e13ffe15 	stw	r4,-8(fp)
  8014d8:	2805883a 	mov	r2,r5
  8014dc:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8014e0:	e03ffb15 	stw	zero,-20(fp)
  8014e4:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8014e8:	e0bffe17 	ldw	r2,-8(fp)
  8014ec:	10800a03 	ldbu	r2,40(r2)
  8014f0:	10803fcc 	andi	r2,r2,255
  8014f4:	1080201c 	xori	r2,r2,128
  8014f8:	10bfe004 	addi	r2,r2,-128
  8014fc:	108016d8 	cmpnei	r2,r2,91
  801500:	1000441e 	bne	r2,zero,801614 <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
  801504:	e0bffe17 	ldw	r2,-8(fp)
  801508:	10800a44 	addi	r2,r2,41
  80150c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  801510:	00000c06 	br	801544 <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  801514:	e0bffb17 	ldw	r2,-20(fp)
  801518:	10c002a4 	muli	r3,r2,10
  80151c:	e0bffd17 	ldw	r2,-12(fp)
  801520:	11000044 	addi	r4,r2,1
  801524:	e13ffd15 	stw	r4,-12(fp)
  801528:	10800003 	ldbu	r2,0(r2)
  80152c:	10803fcc 	andi	r2,r2,255
  801530:	1080201c 	xori	r2,r2,128
  801534:	10bfe004 	addi	r2,r2,-128
  801538:	10bff404 	addi	r2,r2,-48
  80153c:	1885883a 	add	r2,r3,r2
  801540:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  801544:	00802034 	movhi	r2,128
  801548:	10973f04 	addi	r2,r2,23804
  80154c:	10c00017 	ldw	r3,0(r2)
  801550:	e0bffd17 	ldw	r2,-12(fp)
  801554:	10800003 	ldbu	r2,0(r2)
  801558:	10803fcc 	andi	r2,r2,255
  80155c:	1080201c 	xori	r2,r2,128
  801560:	10bfe004 	addi	r2,r2,-128
  801564:	10800044 	addi	r2,r2,1
  801568:	1885883a 	add	r2,r3,r2
  80156c:	10800003 	ldbu	r2,0(r2)
  801570:	10803fcc 	andi	r2,r2,255
  801574:	1080010c 	andi	r2,r2,4
  801578:	103fe61e 	bne	r2,zero,801514 <__alt_data_end+0xff801514>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80157c:	e0bffd17 	ldw	r2,-12(fp)
  801580:	10800003 	ldbu	r2,0(r2)
  801584:	10803fcc 	andi	r2,r2,255
  801588:	1080201c 	xori	r2,r2,128
  80158c:	10bfe004 	addi	r2,r2,-128
  801590:	10800ed8 	cmpnei	r2,r2,59
  801594:	10001e1e 	bne	r2,zero,801610 <lcd_handle_escape+0x14c>
    {
      ptr++;
  801598:	e0bffd17 	ldw	r2,-12(fp)
  80159c:	10800044 	addi	r2,r2,1
  8015a0:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  8015a4:	00000c06 	br	8015d8 <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8015a8:	e0bffc17 	ldw	r2,-16(fp)
  8015ac:	10c002a4 	muli	r3,r2,10
  8015b0:	e0bffd17 	ldw	r2,-12(fp)
  8015b4:	11000044 	addi	r4,r2,1
  8015b8:	e13ffd15 	stw	r4,-12(fp)
  8015bc:	10800003 	ldbu	r2,0(r2)
  8015c0:	10803fcc 	andi	r2,r2,255
  8015c4:	1080201c 	xori	r2,r2,128
  8015c8:	10bfe004 	addi	r2,r2,-128
  8015cc:	10bff404 	addi	r2,r2,-48
  8015d0:	1885883a 	add	r2,r3,r2
  8015d4:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8015d8:	00802034 	movhi	r2,128
  8015dc:	10973f04 	addi	r2,r2,23804
  8015e0:	10c00017 	ldw	r3,0(r2)
  8015e4:	e0bffd17 	ldw	r2,-12(fp)
  8015e8:	10800003 	ldbu	r2,0(r2)
  8015ec:	10803fcc 	andi	r2,r2,255
  8015f0:	1080201c 	xori	r2,r2,128
  8015f4:	10bfe004 	addi	r2,r2,-128
  8015f8:	10800044 	addi	r2,r2,1
  8015fc:	1885883a 	add	r2,r3,r2
  801600:	10800003 	ldbu	r2,0(r2)
  801604:	10803fcc 	andi	r2,r2,255
  801608:	1080010c 	andi	r2,r2,4
  80160c:	103fe61e 	bne	r2,zero,8015a8 <__alt_data_end+0xff8015a8>
  801610:	00000206 	br	80161c <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  801614:	00bfffc4 	movi	r2,-1
  801618:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80161c:	e0bfff07 	ldb	r2,-4(fp)
  801620:	10c012a0 	cmpeqi	r3,r2,74
  801624:	1800281e 	bne	r3,zero,8016c8 <lcd_handle_escape+0x204>
  801628:	10c012c8 	cmpgei	r3,r2,75
  80162c:	1800031e 	bne	r3,zero,80163c <lcd_handle_escape+0x178>
  801630:	10801220 	cmpeqi	r2,r2,72
  801634:	1000051e 	bne	r2,zero,80164c <lcd_handle_escape+0x188>
  801638:	00004506 	br	801750 <lcd_handle_escape+0x28c>
  80163c:	10c012e0 	cmpeqi	r3,r2,75
  801640:	1800281e 	bne	r3,zero,8016e4 <lcd_handle_escape+0x220>
  801644:	108019a0 	cmpeqi	r2,r2,102
  801648:	10004126 	beq	r2,zero,801750 <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80164c:	e0bffc17 	ldw	r2,-16(fp)
  801650:	0080050e 	bge	zero,r2,801668 <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
  801654:	e0bffc17 	ldw	r2,-16(fp)
  801658:	10bfffc4 	addi	r2,r2,-1
  80165c:	1007883a 	mov	r3,r2
  801660:	e0bffe17 	ldw	r2,-8(fp)
  801664:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  801668:	e0bffb17 	ldw	r2,-20(fp)
  80166c:	0080150e 	bge	zero,r2,8016c4 <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
  801670:	e0bffb17 	ldw	r2,-20(fp)
  801674:	10bfffc4 	addi	r2,r2,-1
  801678:	1007883a 	mov	r3,r2
  80167c:	e0bffe17 	ldw	r2,-8(fp)
  801680:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  801684:	e0bffe17 	ldw	r2,-8(fp)
  801688:	10800883 	ldbu	r2,34(r2)
  80168c:	10803fcc 	andi	r2,r2,255
  801690:	10800170 	cmpltui	r2,r2,5
  801694:	1000031e 	bne	r2,zero,8016a4 <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
  801698:	e0bffe17 	ldw	r2,-8(fp)
  80169c:	00c00104 	movi	r3,4
  8016a0:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  8016a4:	00000206 	br	8016b0 <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
  8016a8:	e13ffe17 	ldw	r4,-8(fp)
  8016ac:	08013fc0 	call	8013fc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8016b0:	e0bffe17 	ldw	r2,-8(fp)
  8016b4:	10800883 	ldbu	r2,34(r2)
  8016b8:	10803fcc 	andi	r2,r2,255
  8016bc:	108000e8 	cmpgeui	r2,r2,3
  8016c0:	103ff91e 	bne	r2,zero,8016a8 <__alt_data_end+0xff8016a8>
        lcd_scroll_up(sp);
    }
    break;
  8016c4:	00002206 	br	801750 <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8016c8:	e0bffb17 	ldw	r2,-20(fp)
  8016cc:	10800098 	cmpnei	r2,r2,2
  8016d0:	1000031e 	bne	r2,zero,8016e0 <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
  8016d4:	e13ffe17 	ldw	r4,-8(fp)
  8016d8:	08011480 	call	801148 <lcd_clear_screen>
    break;
  8016dc:	00001c06 	br	801750 <lcd_handle_escape+0x28c>
  8016e0:	00001b06 	br	801750 <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8016e4:	e0bffb17 	ldw	r2,-20(fp)
  8016e8:	00801816 	blt	zero,r2,80174c <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8016ec:	e0bffe17 	ldw	r2,-8(fp)
  8016f0:	10800843 	ldbu	r2,33(r2)
  8016f4:	10803fcc 	andi	r2,r2,255
  8016f8:	10801428 	cmpgeui	r2,r2,80
  8016fc:	1000131e 	bne	r2,zero,80174c <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  801700:	e0bffe17 	ldw	r2,-8(fp)
  801704:	10800883 	ldbu	r2,34(r2)
  801708:	10803fcc 	andi	r2,r2,255
  80170c:	108018e4 	muli	r2,r2,99
  801710:	10801004 	addi	r2,r2,64
  801714:	e0fffe17 	ldw	r3,-8(fp)
  801718:	1887883a 	add	r3,r3,r2
  80171c:	e0bffe17 	ldw	r2,-8(fp)
  801720:	10800843 	ldbu	r2,33(r2)
  801724:	10803fcc 	andi	r2,r2,255
  801728:	1889883a 	add	r4,r3,r2
  80172c:	e0bffe17 	ldw	r2,-8(fp)
  801730:	10800843 	ldbu	r2,33(r2)
  801734:	10803fcc 	andi	r2,r2,255
  801738:	00c01404 	movi	r3,80
  80173c:	1885c83a 	sub	r2,r3,r2
  801740:	01400804 	movi	r5,32
  801744:	100d883a 	mov	r6,r2
  801748:	0803ba00 	call	803ba0 <memset>
    }
    break;
  80174c:	0001883a 	nop
  }
}
  801750:	e037883a 	mov	sp,fp
  801754:	dfc00117 	ldw	ra,4(sp)
  801758:	df000017 	ldw	fp,0(sp)
  80175c:	dec00204 	addi	sp,sp,8
  801760:	f800283a 	ret

00801764 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  801764:	defff304 	addi	sp,sp,-52
  801768:	dfc00c15 	stw	ra,48(sp)
  80176c:	df000b15 	stw	fp,44(sp)
  801770:	df000b04 	addi	fp,sp,44
  801774:	e13ffc15 	stw	r4,-16(fp)
  801778:	e17ffd15 	stw	r5,-12(fp)
  80177c:	e1bffe15 	stw	r6,-8(fp)
  801780:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  801784:	e0bffe17 	ldw	r2,-8(fp)
  801788:	e0fffd17 	ldw	r3,-12(fp)
  80178c:	1885883a 	add	r2,r3,r2
  801790:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  801794:	e0bffc17 	ldw	r2,-16(fp)
  801798:	00c00044 	movi	r3,1
  80179c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  8017a0:	00009e06 	br	801a1c <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
  8017a4:	e0bffd17 	ldw	r2,-12(fp)
  8017a8:	10800003 	ldbu	r2,0(r2)
  8017ac:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  8017b0:	e0bffc17 	ldw	r2,-16(fp)
  8017b4:	10800903 	ldbu	r2,36(r2)
  8017b8:	10803fcc 	andi	r2,r2,255
  8017bc:	1080201c 	xori	r2,r2,128
  8017c0:	10bfe004 	addi	r2,r2,-128
  8017c4:	10003a16 	blt	r2,zero,8018b0 <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
  8017c8:	e0bffc17 	ldw	r2,-16(fp)
  8017cc:	10800903 	ldbu	r2,36(r2)
  8017d0:	10803fcc 	andi	r2,r2,255
  8017d4:	1080201c 	xori	r2,r2,128
  8017d8:	10bfe004 	addi	r2,r2,-128
  8017dc:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8017e0:	e0bffa17 	ldw	r2,-24(fp)
  8017e4:	1000031e 	bne	r2,zero,8017f4 <altera_avalon_lcd_16207_write+0x90>
  8017e8:	e0bff907 	ldb	r2,-28(fp)
  8017ec:	108016d8 	cmpnei	r2,r2,91
  8017f0:	10000f1e 	bne	r2,zero,801830 <altera_avalon_lcd_16207_write+0xcc>
  8017f4:	e0bffa17 	ldw	r2,-24(fp)
  8017f8:	10001a26 	beq	r2,zero,801864 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8017fc:	00802034 	movhi	r2,128
  801800:	10973f04 	addi	r2,r2,23804
  801804:	10c00017 	ldw	r3,0(r2)
  801808:	e0bff907 	ldb	r2,-28(fp)
  80180c:	10800044 	addi	r2,r2,1
  801810:	1885883a 	add	r2,r3,r2
  801814:	10800003 	ldbu	r2,0(r2)
  801818:	10803fcc 	andi	r2,r2,255
  80181c:	1080010c 	andi	r2,r2,4
  801820:	1000101e 	bne	r2,zero,801864 <altera_avalon_lcd_16207_write+0x100>
  801824:	e0bff907 	ldb	r2,-28(fp)
  801828:	10800ee0 	cmpeqi	r2,r2,59
  80182c:	10000d1e 	bne	r2,zero,801864 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
  801830:	e0fffc17 	ldw	r3,-16(fp)
  801834:	e0bffa17 	ldw	r2,-24(fp)
  801838:	1885883a 	add	r2,r3,r2
  80183c:	10800a04 	addi	r2,r2,40
  801840:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  801844:	e0bff907 	ldb	r2,-28(fp)
  801848:	e13ffc17 	ldw	r4,-16(fp)
  80184c:	100b883a 	mov	r5,r2
  801850:	08014c40 	call	8014c4 <lcd_handle_escape>

        sp->esccount = -1;
  801854:	e0bffc17 	ldw	r2,-16(fp)
  801858:	00ffffc4 	movi	r3,-1
  80185c:	10c00905 	stb	r3,36(r2)
  801860:	00001206 	br	8018ac <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  801864:	e0bffc17 	ldw	r2,-16(fp)
  801868:	10800903 	ldbu	r2,36(r2)
  80186c:	10803fcc 	andi	r2,r2,255
  801870:	108001e8 	cmpgeui	r2,r2,7
  801874:	10000d1e 	bne	r2,zero,8018ac <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
  801878:	e0fffc17 	ldw	r3,-16(fp)
  80187c:	e0bffa17 	ldw	r2,-24(fp)
  801880:	1885883a 	add	r2,r3,r2
  801884:	10800a04 	addi	r2,r2,40
  801888:	e0fff903 	ldbu	r3,-28(fp)
  80188c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  801890:	e0bffc17 	ldw	r2,-16(fp)
  801894:	10800903 	ldbu	r2,36(r2)
  801898:	10800044 	addi	r2,r2,1
  80189c:	1007883a 	mov	r3,r2
  8018a0:	e0bffc17 	ldw	r2,-16(fp)
  8018a4:	10c00905 	stb	r3,36(r2)
  8018a8:	00005906 	br	801a10 <altera_avalon_lcd_16207_write+0x2ac>
  8018ac:	00005806 	br	801a10 <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
  8018b0:	e0bff907 	ldb	r2,-28(fp)
  8018b4:	108006d8 	cmpnei	r2,r2,27
  8018b8:	1000031e 	bne	r2,zero,8018c8 <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
  8018bc:	e0bffc17 	ldw	r2,-16(fp)
  8018c0:	10000905 	stb	zero,36(r2)
  8018c4:	00005206 	br	801a10 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
  8018c8:	e0bff907 	ldb	r2,-28(fp)
  8018cc:	10800358 	cmpnei	r2,r2,13
  8018d0:	1000031e 	bne	r2,zero,8018e0 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
  8018d4:	e0bffc17 	ldw	r2,-16(fp)
  8018d8:	10000845 	stb	zero,33(r2)
  8018dc:	00004c06 	br	801a10 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
  8018e0:	e0bff907 	ldb	r2,-28(fp)
  8018e4:	10800298 	cmpnei	r2,r2,10
  8018e8:	1000101e 	bne	r2,zero,80192c <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
  8018ec:	e0bffc17 	ldw	r2,-16(fp)
  8018f0:	10000845 	stb	zero,33(r2)
      sp->y++;
  8018f4:	e0bffc17 	ldw	r2,-16(fp)
  8018f8:	10800883 	ldbu	r2,34(r2)
  8018fc:	10800044 	addi	r2,r2,1
  801900:	1007883a 	mov	r3,r2
  801904:	e0bffc17 	ldw	r2,-16(fp)
  801908:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80190c:	e0bffc17 	ldw	r2,-16(fp)
  801910:	10800883 	ldbu	r2,34(r2)
  801914:	10803fcc 	andi	r2,r2,255
  801918:	108000f0 	cmpltui	r2,r2,3
  80191c:	10003c1e 	bne	r2,zero,801a10 <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
  801920:	e13ffc17 	ldw	r4,-16(fp)
  801924:	08013fc0 	call	8013fc <lcd_scroll_up>
  801928:	00003906 	br	801a10 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
  80192c:	e0bff907 	ldb	r2,-28(fp)
  801930:	10800218 	cmpnei	r2,r2,8
  801934:	10000b1e 	bne	r2,zero,801964 <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
  801938:	e0bffc17 	ldw	r2,-16(fp)
  80193c:	10800843 	ldbu	r2,33(r2)
  801940:	10803fcc 	andi	r2,r2,255
  801944:	10003226 	beq	r2,zero,801a10 <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
  801948:	e0bffc17 	ldw	r2,-16(fp)
  80194c:	10800843 	ldbu	r2,33(r2)
  801950:	10bfffc4 	addi	r2,r2,-1
  801954:	1007883a 	mov	r3,r2
  801958:	e0bffc17 	ldw	r2,-16(fp)
  80195c:	10c00845 	stb	r3,33(r2)
  801960:	00002b06 	br	801a10 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
  801964:	00802034 	movhi	r2,128
  801968:	10973f04 	addi	r2,r2,23804
  80196c:	10c00017 	ldw	r3,0(r2)
  801970:	e0bff907 	ldb	r2,-28(fp)
  801974:	10800044 	addi	r2,r2,1
  801978:	1885883a 	add	r2,r3,r2
  80197c:	10800003 	ldbu	r2,0(r2)
  801980:	10803fcc 	andi	r2,r2,255
  801984:	1080201c 	xori	r2,r2,128
  801988:	10bfe004 	addi	r2,r2,-128
  80198c:	108025cc 	andi	r2,r2,151
  801990:	10001f26 	beq	r2,zero,801a10 <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  801994:	e0bffc17 	ldw	r2,-16(fp)
  801998:	10800883 	ldbu	r2,34(r2)
  80199c:	10803fcc 	andi	r2,r2,255
  8019a0:	108000b0 	cmpltui	r2,r2,2
  8019a4:	1000021e 	bne	r2,zero,8019b0 <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
  8019a8:	e13ffc17 	ldw	r4,-16(fp)
  8019ac:	08013fc0 	call	8013fc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8019b0:	e0bffc17 	ldw	r2,-16(fp)
  8019b4:	10800843 	ldbu	r2,33(r2)
  8019b8:	10803fcc 	andi	r2,r2,255
  8019bc:	10801428 	cmpgeui	r2,r2,80
  8019c0:	10000d1e 	bne	r2,zero,8019f8 <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
  8019c4:	e0bffc17 	ldw	r2,-16(fp)
  8019c8:	10800883 	ldbu	r2,34(r2)
  8019cc:	10c03fcc 	andi	r3,r2,255
  8019d0:	e0bffc17 	ldw	r2,-16(fp)
  8019d4:	10800843 	ldbu	r2,33(r2)
  8019d8:	10803fcc 	andi	r2,r2,255
  8019dc:	e13ffc17 	ldw	r4,-16(fp)
  8019e0:	18c018e4 	muli	r3,r3,99
  8019e4:	20c7883a 	add	r3,r4,r3
  8019e8:	1885883a 	add	r2,r3,r2
  8019ec:	10801004 	addi	r2,r2,64
  8019f0:	e0fff903 	ldbu	r3,-28(fp)
  8019f4:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8019f8:	e0bffc17 	ldw	r2,-16(fp)
  8019fc:	10800843 	ldbu	r2,33(r2)
  801a00:	10800044 	addi	r2,r2,1
  801a04:	1007883a 	mov	r3,r2
  801a08:	e0bffc17 	ldw	r2,-16(fp)
  801a0c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  801a10:	e0bffd17 	ldw	r2,-12(fp)
  801a14:	10800044 	addi	r2,r2,1
  801a18:	e0bffd15 	stw	r2,-12(fp)
  801a1c:	e0fffd17 	ldw	r3,-12(fp)
  801a20:	e0bff817 	ldw	r2,-32(fp)
  801a24:	18bf5f36 	bltu	r3,r2,8017a4 <__alt_data_end+0xff8017a4>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  801a28:	00800404 	movi	r2,16
  801a2c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801a30:	e03ff515 	stw	zero,-44(fp)
  801a34:	00003606 	br	801b10 <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801a38:	00801404 	movi	r2,80
  801a3c:	e0bff715 	stw	r2,-36(fp)
  801a40:	00001206 	br	801a8c <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
  801a44:	e0bff717 	ldw	r2,-36(fp)
  801a48:	10bfffc4 	addi	r2,r2,-1
  801a4c:	e13ffc17 	ldw	r4,-16(fp)
  801a50:	e0fff517 	ldw	r3,-44(fp)
  801a54:	18c018e4 	muli	r3,r3,99
  801a58:	20c7883a 	add	r3,r4,r3
  801a5c:	1885883a 	add	r2,r3,r2
  801a60:	10801004 	addi	r2,r2,64
  801a64:	10800003 	ldbu	r2,0(r2)
  801a68:	10803fcc 	andi	r2,r2,255
  801a6c:	1080201c 	xori	r2,r2,128
  801a70:	10bfe004 	addi	r2,r2,-128
  801a74:	10800820 	cmpeqi	r2,r2,32
  801a78:	1000011e 	bne	r2,zero,801a80 <altera_avalon_lcd_16207_write+0x31c>
        break;
  801a7c:	00000506 	br	801a94 <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801a80:	e0bff717 	ldw	r2,-36(fp)
  801a84:	10bfffc4 	addi	r2,r2,-1
  801a88:	e0bff715 	stw	r2,-36(fp)
  801a8c:	e0bff717 	ldw	r2,-36(fp)
  801a90:	00bfec16 	blt	zero,r2,801a44 <__alt_data_end+0xff801a44>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  801a94:	e0bff717 	ldw	r2,-36(fp)
  801a98:	10800448 	cmpgei	r2,r2,17
  801a9c:	1000031e 	bne	r2,zero,801aac <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
  801aa0:	00800404 	movi	r2,16
  801aa4:	e0bff715 	stw	r2,-36(fp)
  801aa8:	00000306 	br	801ab8 <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
  801aac:	e0bff717 	ldw	r2,-36(fp)
  801ab0:	10800044 	addi	r2,r2,1
  801ab4:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  801ab8:	e0bff717 	ldw	r2,-36(fp)
  801abc:	1009883a 	mov	r4,r2
  801ac0:	e0fffc17 	ldw	r3,-16(fp)
  801ac4:	e0bff517 	ldw	r2,-44(fp)
  801ac8:	108018e4 	muli	r2,r2,99
  801acc:	10802404 	addi	r2,r2,144
  801ad0:	1885883a 	add	r2,r3,r2
  801ad4:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
  801ad8:	e0fff617 	ldw	r3,-40(fp)
  801adc:	e0bff717 	ldw	r2,-36(fp)
  801ae0:	1880020e 	bge	r3,r2,801aec <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
  801ae4:	e0bff717 	ldw	r2,-36(fp)
  801ae8:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  801aec:	e0fffc17 	ldw	r3,-16(fp)
  801af0:	e0bff517 	ldw	r2,-44(fp)
  801af4:	108018e4 	muli	r2,r2,99
  801af8:	10802404 	addi	r2,r2,144
  801afc:	1885883a 	add	r2,r3,r2
  801b00:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801b04:	e0bff517 	ldw	r2,-44(fp)
  801b08:	10800044 	addi	r2,r2,1
  801b0c:	e0bff515 	stw	r2,-44(fp)
  801b10:	e0bff517 	ldw	r2,-44(fp)
  801b14:	10800090 	cmplti	r2,r2,2
  801b18:	103fc71e 	bne	r2,zero,801a38 <__alt_data_end+0xff801a38>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  801b1c:	e0bff617 	ldw	r2,-40(fp)
  801b20:	10800448 	cmpgei	r2,r2,17
  801b24:	1000031e 	bne	r2,zero,801b34 <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
  801b28:	e0bffc17 	ldw	r2,-16(fp)
  801b2c:	10000985 	stb	zero,38(r2)
  801b30:	00002e06 	br	801bec <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
  801b34:	e0bff617 	ldw	r2,-40(fp)
  801b38:	1085883a 	add	r2,r2,r2
  801b3c:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  801b40:	e0bff617 	ldw	r2,-40(fp)
  801b44:	1007883a 	mov	r3,r2
  801b48:	e0bffc17 	ldw	r2,-16(fp)
  801b4c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801b50:	e03ff515 	stw	zero,-44(fp)
  801b54:	00002206 	br	801be0 <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  801b58:	e0fffc17 	ldw	r3,-16(fp)
  801b5c:	e0bff517 	ldw	r2,-44(fp)
  801b60:	108018e4 	muli	r2,r2,99
  801b64:	10802404 	addi	r2,r2,144
  801b68:	1885883a 	add	r2,r3,r2
  801b6c:	10800043 	ldbu	r2,1(r2)
  801b70:	10803fcc 	andi	r2,r2,255
  801b74:	1080201c 	xori	r2,r2,128
  801b78:	10bfe004 	addi	r2,r2,-128
  801b7c:	10800450 	cmplti	r2,r2,17
  801b80:	1000141e 	bne	r2,zero,801bd4 <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  801b84:	e0fffc17 	ldw	r3,-16(fp)
  801b88:	e0bff517 	ldw	r2,-44(fp)
  801b8c:	108018e4 	muli	r2,r2,99
  801b90:	10802404 	addi	r2,r2,144
  801b94:	1885883a 	add	r2,r3,r2
  801b98:	10800043 	ldbu	r2,1(r2)
  801b9c:	10803fcc 	andi	r2,r2,255
  801ba0:	1080201c 	xori	r2,r2,128
  801ba4:	10bfe004 	addi	r2,r2,-128
  801ba8:	1004923a 	slli	r2,r2,8
  801bac:	1009883a 	mov	r4,r2
  801bb0:	e17ff617 	ldw	r5,-40(fp)
  801bb4:	08040700 	call	804070 <__divsi3>
  801bb8:	1009883a 	mov	r4,r2
  801bbc:	e0fffc17 	ldw	r3,-16(fp)
  801bc0:	e0bff517 	ldw	r2,-44(fp)
  801bc4:	108018e4 	muli	r2,r2,99
  801bc8:	10802404 	addi	r2,r2,144
  801bcc:	1885883a 	add	r2,r3,r2
  801bd0:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801bd4:	e0bff517 	ldw	r2,-44(fp)
  801bd8:	10800044 	addi	r2,r2,1
  801bdc:	e0bff515 	stw	r2,-44(fp)
  801be0:	e0bff517 	ldw	r2,-44(fp)
  801be4:	10800090 	cmplti	r2,r2,2
  801be8:	103fdb1e 	bne	r2,zero,801b58 <__alt_data_end+0xff801b58>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  801bec:	e0bffc17 	ldw	r2,-16(fp)
  801bf0:	10800943 	ldbu	r2,37(r2)
  801bf4:	10803fcc 	andi	r2,r2,255
  801bf8:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  801bfc:	e13ffc17 	ldw	r4,-16(fp)
  801c00:	08012140 	call	801214 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  801c04:	e0bffc17 	ldw	r2,-16(fp)
  801c08:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  801c0c:	e0bffc17 	ldw	r2,-16(fp)
  801c10:	10800943 	ldbu	r2,37(r2)
  801c14:	10c03fcc 	andi	r3,r2,255
  801c18:	e0bffb17 	ldw	r2,-20(fp)
  801c1c:	1880011e 	bne	r3,r2,801c24 <altera_avalon_lcd_16207_write+0x4c0>
      break;
  801c20:	00000406 	br	801c34 <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  801c24:	e0bffc17 	ldw	r2,-16(fp)
  801c28:	00c00044 	movi	r3,1
  801c2c:	10c009c5 	stb	r3,39(r2)
  }
  801c30:	003fee06 	br	801bec <__alt_data_end+0xff801bec>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  801c34:	e0bffe17 	ldw	r2,-8(fp)
}
  801c38:	e037883a 	mov	sp,fp
  801c3c:	dfc00117 	ldw	ra,4(sp)
  801c40:	df000017 	ldw	fp,0(sp)
  801c44:	dec00204 	addi	sp,sp,8
  801c48:	f800283a 	ret

00801c4c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  801c4c:	defffc04 	addi	sp,sp,-16
  801c50:	dfc00315 	stw	ra,12(sp)
  801c54:	df000215 	stw	fp,8(sp)
  801c58:	df000204 	addi	fp,sp,8
  801c5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  801c60:	e0bfff17 	ldw	r2,-4(fp)
  801c64:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  801c68:	e0bffe17 	ldw	r2,-8(fp)
  801c6c:	10800943 	ldbu	r2,37(r2)
  801c70:	10803fcc 	andi	r2,r2,255
  801c74:	10c00044 	addi	r3,r2,1
  801c78:	e0bffe17 	ldw	r2,-8(fp)
  801c7c:	10800983 	ldbu	r2,38(r2)
  801c80:	10803fcc 	andi	r2,r2,255
  801c84:	18800316 	blt	r3,r2,801c94 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  801c88:	e0bffe17 	ldw	r2,-8(fp)
  801c8c:	10000945 	stb	zero,37(r2)
  801c90:	00000606 	br	801cac <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  801c94:	e0bffe17 	ldw	r2,-8(fp)
  801c98:	10800943 	ldbu	r2,37(r2)
  801c9c:	10800044 	addi	r2,r2,1
  801ca0:	1007883a 	mov	r3,r2
  801ca4:	e0bffe17 	ldw	r2,-8(fp)
  801ca8:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  801cac:	e0bffe17 	ldw	r2,-8(fp)
  801cb0:	10800983 	ldbu	r2,38(r2)
  801cb4:	10803fcc 	andi	r2,r2,255
  801cb8:	10000826 	beq	r2,zero,801cdc <alt_lcd_16207_timeout+0x90>
  801cbc:	e0bffe17 	ldw	r2,-8(fp)
  801cc0:	108009c3 	ldbu	r2,39(r2)
  801cc4:	10803fcc 	andi	r2,r2,255
  801cc8:	1080201c 	xori	r2,r2,128
  801ccc:	10bfe004 	addi	r2,r2,-128
  801cd0:	1000021e 	bne	r2,zero,801cdc <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  801cd4:	e13ffe17 	ldw	r4,-8(fp)
  801cd8:	08012140 	call	801214 <lcd_repaint_screen>

  return sp->period;
  801cdc:	e0bffe17 	ldw	r2,-8(fp)
  801ce0:	10800717 	ldw	r2,28(r2)
}
  801ce4:	e037883a 	mov	sp,fp
  801ce8:	dfc00117 	ldw	ra,4(sp)
  801cec:	df000017 	ldw	fp,0(sp)
  801cf0:	dec00204 	addi	sp,sp,8
  801cf4:	f800283a 	ret

00801cf8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  801cf8:	defffc04 	addi	sp,sp,-16
  801cfc:	dfc00315 	stw	ra,12(sp)
  801d00:	df000215 	stw	fp,8(sp)
  801d04:	df000204 	addi	fp,sp,8
  801d08:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  801d0c:	e0bfff17 	ldw	r2,-4(fp)
  801d10:	10800017 	ldw	r2,0(r2)
  801d14:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  801d18:	e0bfff17 	ldw	r2,-4(fp)
  801d1c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  801d20:	010ea604 	movi	r4,15000
  801d24:	08034780 	call	803478 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801d28:	e0bffe17 	ldw	r2,-8(fp)
  801d2c:	00c00c04 	movi	r3,48
  801d30:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  801d34:	01040104 	movi	r4,4100
  801d38:	08034780 	call	803478 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801d3c:	e0bffe17 	ldw	r2,-8(fp)
  801d40:	00c00c04 	movi	r3,48
  801d44:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  801d48:	0100fa04 	movi	r4,1000
  801d4c:	08034780 	call	803478 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801d50:	e0bffe17 	ldw	r2,-8(fp)
  801d54:	00c00c04 	movi	r3,48
  801d58:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  801d5c:	e13fff17 	ldw	r4,-4(fp)
  801d60:	01400e04 	movi	r5,56
  801d64:	0800fc00 	call	800fc0 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  801d68:	e13fff17 	ldw	r4,-4(fp)
  801d6c:	01400204 	movi	r5,8
  801d70:	0800fc00 	call	800fc0 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  801d74:	e13fff17 	ldw	r4,-4(fp)
  801d78:	08011480 	call	801148 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  801d7c:	e13fff17 	ldw	r4,-4(fp)
  801d80:	01400184 	movi	r5,6
  801d84:	0800fc00 	call	800fc0 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  801d88:	e13fff17 	ldw	r4,-4(fp)
  801d8c:	01400304 	movi	r5,12
  801d90:	0800fc00 	call	800fc0 <lcd_write_command>

  sp->esccount = -1;
  801d94:	e0bfff17 	ldw	r2,-4(fp)
  801d98:	00ffffc4 	movi	r3,-1
  801d9c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  801da0:	e0bfff17 	ldw	r2,-4(fp)
  801da4:	10800a04 	addi	r2,r2,40
  801da8:	1009883a 	mov	r4,r2
  801dac:	000b883a 	mov	r5,zero
  801db0:	01800204 	movi	r6,8
  801db4:	0803ba00 	call	803ba0 <memset>

  sp->scrollpos = 0;
  801db8:	e0bfff17 	ldw	r2,-4(fp)
  801dbc:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  801dc0:	e0bfff17 	ldw	r2,-4(fp)
  801dc4:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  801dc8:	e0bfff17 	ldw	r2,-4(fp)
  801dcc:	100009c5 	stb	zero,39(r2)
  801dd0:	00802034 	movhi	r2,128
  801dd4:	109d6f04 	addi	r2,r2,30140
  801dd8:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  801ddc:	1009883a 	mov	r4,r2
  801de0:	01400284 	movi	r5,10
  801de4:	08041200 	call	804120 <__udivsi3>
  801de8:	1007883a 	mov	r3,r2
  801dec:	e0bfff17 	ldw	r2,-4(fp)
  801df0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  801df4:	e0bfff17 	ldw	r2,-4(fp)
  801df8:	10c00104 	addi	r3,r2,4
  801dfc:	e0bfff17 	ldw	r2,-4(fp)
  801e00:	10800717 	ldw	r2,28(r2)
  801e04:	1809883a 	mov	r4,r3
  801e08:	100b883a 	mov	r5,r2
  801e0c:	01802034 	movhi	r6,128
  801e10:	31871304 	addi	r6,r6,7244
  801e14:	e1ffff17 	ldw	r7,-4(fp)
  801e18:	08028740 	call	802874 <alt_alarm_start>
}
  801e1c:	e037883a 	mov	sp,fp
  801e20:	dfc00117 	ldw	ra,4(sp)
  801e24:	df000017 	ldw	fp,0(sp)
  801e28:	dec00204 	addi	sp,sp,8
  801e2c:	f800283a 	ret

00801e30 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  801e30:	defffa04 	addi	sp,sp,-24
  801e34:	dfc00515 	stw	ra,20(sp)
  801e38:	df000415 	stw	fp,16(sp)
  801e3c:	df000404 	addi	fp,sp,16
  801e40:	e13ffd15 	stw	r4,-12(fp)
  801e44:	e17ffe15 	stw	r5,-8(fp)
  801e48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  801e4c:	e0bffd17 	ldw	r2,-12(fp)
  801e50:	10800017 	ldw	r2,0(r2)
  801e54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  801e58:	e0bffc17 	ldw	r2,-16(fp)
  801e5c:	10c00a04 	addi	r3,r2,40
  801e60:	e0bffd17 	ldw	r2,-12(fp)
  801e64:	10800217 	ldw	r2,8(r2)
  801e68:	1809883a 	mov	r4,r3
  801e6c:	e17ffe17 	ldw	r5,-8(fp)
  801e70:	e1bfff17 	ldw	r6,-4(fp)
  801e74:	100f883a 	mov	r7,r2
  801e78:	08017640 	call	801764 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  801e7c:	e037883a 	mov	sp,fp
  801e80:	dfc00117 	ldw	ra,4(sp)
  801e84:	df000017 	ldw	fp,0(sp)
  801e88:	dec00204 	addi	sp,sp,8
  801e8c:	f800283a 	ret

00801e90 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  801e90:	defff904 	addi	sp,sp,-28
  801e94:	dfc00615 	stw	ra,24(sp)
  801e98:	df000515 	stw	fp,20(sp)
  801e9c:	df000504 	addi	fp,sp,20
  801ea0:	e13ffe15 	stw	r4,-8(fp)
  801ea4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  801ea8:	0007883a 	mov	r3,zero
  801eac:	e0bffe17 	ldw	r2,-8(fp)
  801eb0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  801eb4:	e0bffe17 	ldw	r2,-8(fp)
  801eb8:	10800104 	addi	r2,r2,4
  801ebc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801ec0:	0005303a 	rdctl	r2,status
  801ec4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801ec8:	e0fffc17 	ldw	r3,-16(fp)
  801ecc:	00bfff84 	movi	r2,-2
  801ed0:	1884703a 	and	r2,r3,r2
  801ed4:	1001703a 	wrctl	status,r2
  
  return context;
  801ed8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  801edc:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  801ee0:	08033740 	call	803374 <alt_tick>
  801ee4:	e0bffb17 	ldw	r2,-20(fp)
  801ee8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801eec:	e0bffd17 	ldw	r2,-12(fp)
  801ef0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  801ef4:	e037883a 	mov	sp,fp
  801ef8:	dfc00117 	ldw	ra,4(sp)
  801efc:	df000017 	ldw	fp,0(sp)
  801f00:	dec00204 	addi	sp,sp,8
  801f04:	f800283a 	ret

00801f08 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  801f08:	defff904 	addi	sp,sp,-28
  801f0c:	dfc00615 	stw	ra,24(sp)
  801f10:	df000515 	stw	fp,20(sp)
  801f14:	df000504 	addi	fp,sp,20
  801f18:	e13ffc15 	stw	r4,-16(fp)
  801f1c:	e17ffd15 	stw	r5,-12(fp)
  801f20:	e1bffe15 	stw	r6,-8(fp)
  801f24:	e1ffff15 	stw	r7,-4(fp)
  801f28:	e0bfff17 	ldw	r2,-4(fp)
  801f2c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  801f30:	00802034 	movhi	r2,128
  801f34:	109d6f04 	addi	r2,r2,30140
  801f38:	10800017 	ldw	r2,0(r2)
  801f3c:	1000041e 	bne	r2,zero,801f50 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  801f40:	00802034 	movhi	r2,128
  801f44:	109d6f04 	addi	r2,r2,30140
  801f48:	e0fffb17 	ldw	r3,-20(fp)
  801f4c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  801f50:	e0bffc17 	ldw	r2,-16(fp)
  801f54:	10800104 	addi	r2,r2,4
  801f58:	00c001c4 	movi	r3,7
  801f5c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  801f60:	e13ffe17 	ldw	r4,-8(fp)
  801f64:	e17ffc17 	ldw	r5,-16(fp)
  801f68:	01802034 	movhi	r6,128
  801f6c:	3187a404 	addi	r6,r6,7824
  801f70:	0802e580 	call	802e58 <alt_irq_register>
#endif  
}
  801f74:	e037883a 	mov	sp,fp
  801f78:	dfc00117 	ldw	ra,4(sp)
  801f7c:	df000017 	ldw	fp,0(sp)
  801f80:	dec00204 	addi	sp,sp,8
  801f84:	f800283a 	ret

00801f88 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  801f88:	defffa04 	addi	sp,sp,-24
  801f8c:	dfc00515 	stw	ra,20(sp)
  801f90:	df000415 	stw	fp,16(sp)
  801f94:	df000404 	addi	fp,sp,16
  801f98:	e13ffd15 	stw	r4,-12(fp)
  801f9c:	e17ffe15 	stw	r5,-8(fp)
  801fa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  801fa4:	e0bffd17 	ldw	r2,-12(fp)
  801fa8:	10800017 	ldw	r2,0(r2)
  801fac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  801fb0:	e0bffc17 	ldw	r2,-16(fp)
  801fb4:	10c00a04 	addi	r3,r2,40
  801fb8:	e0bffd17 	ldw	r2,-12(fp)
  801fbc:	10800217 	ldw	r2,8(r2)
  801fc0:	1809883a 	mov	r4,r3
  801fc4:	e17ffe17 	ldw	r5,-8(fp)
  801fc8:	e1bfff17 	ldw	r6,-4(fp)
  801fcc:	100f883a 	mov	r7,r2
  801fd0:	080249c0 	call	80249c <altera_avalon_uart_read>
      fd->fd_flags);
}
  801fd4:	e037883a 	mov	sp,fp
  801fd8:	dfc00117 	ldw	ra,4(sp)
  801fdc:	df000017 	ldw	fp,0(sp)
  801fe0:	dec00204 	addi	sp,sp,8
  801fe4:	f800283a 	ret

00801fe8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  801fe8:	defffa04 	addi	sp,sp,-24
  801fec:	dfc00515 	stw	ra,20(sp)
  801ff0:	df000415 	stw	fp,16(sp)
  801ff4:	df000404 	addi	fp,sp,16
  801ff8:	e13ffd15 	stw	r4,-12(fp)
  801ffc:	e17ffe15 	stw	r5,-8(fp)
  802000:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802004:	e0bffd17 	ldw	r2,-12(fp)
  802008:	10800017 	ldw	r2,0(r2)
  80200c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  802010:	e0bffc17 	ldw	r2,-16(fp)
  802014:	10c00a04 	addi	r3,r2,40
  802018:	e0bffd17 	ldw	r2,-12(fp)
  80201c:	10800217 	ldw	r2,8(r2)
  802020:	1809883a 	mov	r4,r3
  802024:	e17ffe17 	ldw	r5,-8(fp)
  802028:	e1bfff17 	ldw	r6,-4(fp)
  80202c:	100f883a 	mov	r7,r2
  802030:	08026c80 	call	8026c8 <altera_avalon_uart_write>
      fd->fd_flags);
}
  802034:	e037883a 	mov	sp,fp
  802038:	dfc00117 	ldw	ra,4(sp)
  80203c:	df000017 	ldw	fp,0(sp)
  802040:	dec00204 	addi	sp,sp,8
  802044:	f800283a 	ret

00802048 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  802048:	defffc04 	addi	sp,sp,-16
  80204c:	dfc00315 	stw	ra,12(sp)
  802050:	df000215 	stw	fp,8(sp)
  802054:	df000204 	addi	fp,sp,8
  802058:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80205c:	e0bfff17 	ldw	r2,-4(fp)
  802060:	10800017 	ldw	r2,0(r2)
  802064:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  802068:	e0bffe17 	ldw	r2,-8(fp)
  80206c:	10c00a04 	addi	r3,r2,40
  802070:	e0bfff17 	ldw	r2,-4(fp)
  802074:	10800217 	ldw	r2,8(r2)
  802078:	1809883a 	mov	r4,r3
  80207c:	100b883a 	mov	r5,r2
  802080:	08023f80 	call	8023f8 <altera_avalon_uart_close>
}
  802084:	e037883a 	mov	sp,fp
  802088:	dfc00117 	ldw	ra,4(sp)
  80208c:	df000017 	ldw	fp,0(sp)
  802090:	dec00204 	addi	sp,sp,8
  802094:	f800283a 	ret

00802098 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  802098:	defff904 	addi	sp,sp,-28
  80209c:	dfc00615 	stw	ra,24(sp)
  8020a0:	df000515 	stw	fp,20(sp)
  8020a4:	df000504 	addi	fp,sp,20
  8020a8:	e13ffd15 	stw	r4,-12(fp)
  8020ac:	e17ffe15 	stw	r5,-8(fp)
  8020b0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8020b4:	e0bffd17 	ldw	r2,-12(fp)
  8020b8:	10800017 	ldw	r2,0(r2)
  8020bc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8020c0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8020c4:	1000041e 	bne	r2,zero,8020d8 <altera_avalon_uart_init+0x40>
  8020c8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8020cc:	1000021e 	bne	r2,zero,8020d8 <altera_avalon_uart_init+0x40>
  8020d0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8020d4:	10000226 	beq	r2,zero,8020e0 <altera_avalon_uart_init+0x48>
  8020d8:	00800044 	movi	r2,1
  8020dc:	00000106 	br	8020e4 <altera_avalon_uart_init+0x4c>
  8020e0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8020e4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8020e8:	e0bffc17 	ldw	r2,-16(fp)
  8020ec:	10000d1e 	bne	r2,zero,802124 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8020f0:	e0bffd17 	ldw	r2,-12(fp)
  8020f4:	00c32004 	movi	r3,3200
  8020f8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8020fc:	e0bffb17 	ldw	r2,-20(fp)
  802100:	10800304 	addi	r2,r2,12
  802104:	e0fffd17 	ldw	r3,-12(fp)
  802108:	18c00117 	ldw	r3,4(r3)
  80210c:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  802110:	e13fff17 	ldw	r4,-4(fp)
  802114:	e17ffd17 	ldw	r5,-12(fp)
  802118:	01802034 	movhi	r6,128
  80211c:	31884e04 	addi	r6,r6,8504
  802120:	0802e580 	call	802e58 <alt_irq_register>
#endif  
  }
}
  802124:	e037883a 	mov	sp,fp
  802128:	dfc00117 	ldw	ra,4(sp)
  80212c:	df000017 	ldw	fp,0(sp)
  802130:	dec00204 	addi	sp,sp,8
  802134:	f800283a 	ret

00802138 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  802138:	defff904 	addi	sp,sp,-28
  80213c:	dfc00615 	stw	ra,24(sp)
  802140:	df000515 	stw	fp,20(sp)
  802144:	df000504 	addi	fp,sp,20
  802148:	e13ffe15 	stw	r4,-8(fp)
  80214c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  802150:	e0bffe17 	ldw	r2,-8(fp)
  802154:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  802158:	e0bffb17 	ldw	r2,-20(fp)
  80215c:	10800017 	ldw	r2,0(r2)
  802160:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  802164:	e0bffc17 	ldw	r2,-16(fp)
  802168:	10800204 	addi	r2,r2,8
  80216c:	10800037 	ldwio	r2,0(r2)
  802170:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  802174:	e0bffc17 	ldw	r2,-16(fp)
  802178:	10800204 	addi	r2,r2,8
  80217c:	0007883a 	mov	r3,zero
  802180:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  802184:	e0bffc17 	ldw	r2,-16(fp)
  802188:	10800204 	addi	r2,r2,8
  80218c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  802190:	e0bffd17 	ldw	r2,-12(fp)
  802194:	1080200c 	andi	r2,r2,128
  802198:	10000326 	beq	r2,zero,8021a8 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  80219c:	e13ffb17 	ldw	r4,-20(fp)
  8021a0:	e17ffd17 	ldw	r5,-12(fp)
  8021a4:	08021d40 	call	8021d4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8021a8:	e0bffd17 	ldw	r2,-12(fp)
  8021ac:	1081100c 	andi	r2,r2,1088
  8021b0:	10000326 	beq	r2,zero,8021c0 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8021b4:	e13ffb17 	ldw	r4,-20(fp)
  8021b8:	e17ffd17 	ldw	r5,-12(fp)
  8021bc:	08022b40 	call	8022b4 <altera_avalon_uart_txirq>
  }
  

}
  8021c0:	e037883a 	mov	sp,fp
  8021c4:	dfc00117 	ldw	ra,4(sp)
  8021c8:	df000017 	ldw	fp,0(sp)
  8021cc:	dec00204 	addi	sp,sp,8
  8021d0:	f800283a 	ret

008021d4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8021d4:	defffc04 	addi	sp,sp,-16
  8021d8:	df000315 	stw	fp,12(sp)
  8021dc:	df000304 	addi	fp,sp,12
  8021e0:	e13ffe15 	stw	r4,-8(fp)
  8021e4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8021e8:	e0bfff17 	ldw	r2,-4(fp)
  8021ec:	108000cc 	andi	r2,r2,3
  8021f0:	10000126 	beq	r2,zero,8021f8 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8021f4:	00002b06 	br	8022a4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8021f8:	e0bffe17 	ldw	r2,-8(fp)
  8021fc:	10800317 	ldw	r2,12(r2)
  802200:	e0bffe17 	ldw	r2,-8(fp)
  802204:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802208:	e0bffe17 	ldw	r2,-8(fp)
  80220c:	10800317 	ldw	r2,12(r2)
  802210:	10800044 	addi	r2,r2,1
  802214:	10800fcc 	andi	r2,r2,63
  802218:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80221c:	e0bffe17 	ldw	r2,-8(fp)
  802220:	10800317 	ldw	r2,12(r2)
  802224:	e0fffe17 	ldw	r3,-8(fp)
  802228:	18c00017 	ldw	r3,0(r3)
  80222c:	18c00037 	ldwio	r3,0(r3)
  802230:	1809883a 	mov	r4,r3
  802234:	e0fffe17 	ldw	r3,-8(fp)
  802238:	1885883a 	add	r2,r3,r2
  80223c:	10800704 	addi	r2,r2,28
  802240:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  802244:	e0bffe17 	ldw	r2,-8(fp)
  802248:	e0fffd17 	ldw	r3,-12(fp)
  80224c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802250:	e0bffe17 	ldw	r2,-8(fp)
  802254:	10800317 	ldw	r2,12(r2)
  802258:	10800044 	addi	r2,r2,1
  80225c:	10800fcc 	andi	r2,r2,63
  802260:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  802264:	e0bffe17 	ldw	r2,-8(fp)
  802268:	10c00217 	ldw	r3,8(r2)
  80226c:	e0bffd17 	ldw	r2,-12(fp)
  802270:	18800c1e 	bne	r3,r2,8022a4 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802274:	e0bffe17 	ldw	r2,-8(fp)
  802278:	10c00117 	ldw	r3,4(r2)
  80227c:	00bfdfc4 	movi	r2,-129
  802280:	1886703a 	and	r3,r3,r2
  802284:	e0bffe17 	ldw	r2,-8(fp)
  802288:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80228c:	e0bffe17 	ldw	r2,-8(fp)
  802290:	10800017 	ldw	r2,0(r2)
  802294:	10800304 	addi	r2,r2,12
  802298:	e0fffe17 	ldw	r3,-8(fp)
  80229c:	18c00117 	ldw	r3,4(r3)
  8022a0:	10c00035 	stwio	r3,0(r2)
  }   
}
  8022a4:	e037883a 	mov	sp,fp
  8022a8:	df000017 	ldw	fp,0(sp)
  8022ac:	dec00104 	addi	sp,sp,4
  8022b0:	f800283a 	ret

008022b4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8022b4:	defffb04 	addi	sp,sp,-20
  8022b8:	df000415 	stw	fp,16(sp)
  8022bc:	df000404 	addi	fp,sp,16
  8022c0:	e13ffc15 	stw	r4,-16(fp)
  8022c4:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8022c8:	e0bffc17 	ldw	r2,-16(fp)
  8022cc:	10c00417 	ldw	r3,16(r2)
  8022d0:	e0bffc17 	ldw	r2,-16(fp)
  8022d4:	10800517 	ldw	r2,20(r2)
  8022d8:	18803226 	beq	r3,r2,8023a4 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8022dc:	e0bffc17 	ldw	r2,-16(fp)
  8022e0:	10800617 	ldw	r2,24(r2)
  8022e4:	1080008c 	andi	r2,r2,2
  8022e8:	10000326 	beq	r2,zero,8022f8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8022ec:	e0bffd17 	ldw	r2,-12(fp)
  8022f0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8022f4:	10001d26 	beq	r2,zero,80236c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8022f8:	e0bffc17 	ldw	r2,-16(fp)
  8022fc:	10800417 	ldw	r2,16(r2)
  802300:	e0bffc17 	ldw	r2,-16(fp)
  802304:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  802308:	e0bffc17 	ldw	r2,-16(fp)
  80230c:	10800017 	ldw	r2,0(r2)
  802310:	10800104 	addi	r2,r2,4
  802314:	e0fffc17 	ldw	r3,-16(fp)
  802318:	18c00417 	ldw	r3,16(r3)
  80231c:	e13ffc17 	ldw	r4,-16(fp)
  802320:	20c7883a 	add	r3,r4,r3
  802324:	18c01704 	addi	r3,r3,92
  802328:	18c00003 	ldbu	r3,0(r3)
  80232c:	18c03fcc 	andi	r3,r3,255
  802330:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  802334:	e0bffc17 	ldw	r2,-16(fp)
  802338:	10800417 	ldw	r2,16(r2)
  80233c:	10800044 	addi	r2,r2,1
  802340:	e0fffc17 	ldw	r3,-16(fp)
  802344:	18800415 	stw	r2,16(r3)
  802348:	10c00fcc 	andi	r3,r2,63
  80234c:	e0bffc17 	ldw	r2,-16(fp)
  802350:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802354:	e0bffc17 	ldw	r2,-16(fp)
  802358:	10800117 	ldw	r2,4(r2)
  80235c:	10c01014 	ori	r3,r2,64
  802360:	e0bffc17 	ldw	r2,-16(fp)
  802364:	10c00115 	stw	r3,4(r2)
  802368:	00000e06 	br	8023a4 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80236c:	e0bffc17 	ldw	r2,-16(fp)
  802370:	10800017 	ldw	r2,0(r2)
  802374:	10800204 	addi	r2,r2,8
  802378:	10800037 	ldwio	r2,0(r2)
  80237c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  802380:	e0bffd17 	ldw	r2,-12(fp)
  802384:	1082000c 	andi	r2,r2,2048
  802388:	1000061e 	bne	r2,zero,8023a4 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80238c:	e0bffc17 	ldw	r2,-16(fp)
  802390:	10c00117 	ldw	r3,4(r2)
  802394:	00bfefc4 	movi	r2,-65
  802398:	1886703a 	and	r3,r3,r2
  80239c:	e0bffc17 	ldw	r2,-16(fp)
  8023a0:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8023a4:	e0bffc17 	ldw	r2,-16(fp)
  8023a8:	10c00417 	ldw	r3,16(r2)
  8023ac:	e0bffc17 	ldw	r2,-16(fp)
  8023b0:	10800517 	ldw	r2,20(r2)
  8023b4:	1880061e 	bne	r3,r2,8023d0 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8023b8:	e0bffc17 	ldw	r2,-16(fp)
  8023bc:	10c00117 	ldw	r3,4(r2)
  8023c0:	00beefc4 	movi	r2,-1089
  8023c4:	1886703a 	and	r3,r3,r2
  8023c8:	e0bffc17 	ldw	r2,-16(fp)
  8023cc:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8023d0:	e0bffc17 	ldw	r2,-16(fp)
  8023d4:	10800017 	ldw	r2,0(r2)
  8023d8:	10800304 	addi	r2,r2,12
  8023dc:	e0fffc17 	ldw	r3,-16(fp)
  8023e0:	18c00117 	ldw	r3,4(r3)
  8023e4:	10c00035 	stwio	r3,0(r2)
}
  8023e8:	e037883a 	mov	sp,fp
  8023ec:	df000017 	ldw	fp,0(sp)
  8023f0:	dec00104 	addi	sp,sp,4
  8023f4:	f800283a 	ret

008023f8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8023f8:	defffd04 	addi	sp,sp,-12
  8023fc:	df000215 	stw	fp,8(sp)
  802400:	df000204 	addi	fp,sp,8
  802404:	e13ffe15 	stw	r4,-8(fp)
  802408:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80240c:	00000506 	br	802424 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  802410:	e0bfff17 	ldw	r2,-4(fp)
  802414:	1090000c 	andi	r2,r2,16384
  802418:	10000226 	beq	r2,zero,802424 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80241c:	00bffd44 	movi	r2,-11
  802420:	00000606 	br	80243c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  802424:	e0bffe17 	ldw	r2,-8(fp)
  802428:	10c00417 	ldw	r3,16(r2)
  80242c:	e0bffe17 	ldw	r2,-8(fp)
  802430:	10800517 	ldw	r2,20(r2)
  802434:	18bff61e 	bne	r3,r2,802410 <__alt_data_end+0xff802410>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  802438:	0005883a 	mov	r2,zero
}
  80243c:	e037883a 	mov	sp,fp
  802440:	df000017 	ldw	fp,0(sp)
  802444:	dec00104 	addi	sp,sp,4
  802448:	f800283a 	ret

0080244c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80244c:	defffe04 	addi	sp,sp,-8
  802450:	dfc00115 	stw	ra,4(sp)
  802454:	df000015 	stw	fp,0(sp)
  802458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80245c:	00802034 	movhi	r2,128
  802460:	10973b04 	addi	r2,r2,23788
  802464:	10800017 	ldw	r2,0(r2)
  802468:	10000526 	beq	r2,zero,802480 <alt_get_errno+0x34>
  80246c:	00802034 	movhi	r2,128
  802470:	10973b04 	addi	r2,r2,23788
  802474:	10800017 	ldw	r2,0(r2)
  802478:	103ee83a 	callr	r2
  80247c:	00000206 	br	802488 <alt_get_errno+0x3c>
  802480:	00802034 	movhi	r2,128
  802484:	109d7204 	addi	r2,r2,30152
}
  802488:	e037883a 	mov	sp,fp
  80248c:	dfc00117 	ldw	ra,4(sp)
  802490:	df000017 	ldw	fp,0(sp)
  802494:	dec00204 	addi	sp,sp,8
  802498:	f800283a 	ret

0080249c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80249c:	defff204 	addi	sp,sp,-56
  8024a0:	dfc00d15 	stw	ra,52(sp)
  8024a4:	df000c15 	stw	fp,48(sp)
  8024a8:	df000c04 	addi	fp,sp,48
  8024ac:	e13ffc15 	stw	r4,-16(fp)
  8024b0:	e17ffd15 	stw	r5,-12(fp)
  8024b4:	e1bffe15 	stw	r6,-8(fp)
  8024b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8024bc:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8024c0:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8024c4:	e0bfff17 	ldw	r2,-4(fp)
  8024c8:	1090000c 	andi	r2,r2,16384
  8024cc:	1005003a 	cmpeq	r2,r2,zero
  8024d0:	10803fcc 	andi	r2,r2,255
  8024d4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8024d8:	00001306 	br	802528 <altera_avalon_uart_read+0x8c>
    {
      count++;
  8024dc:	e0bff517 	ldw	r2,-44(fp)
  8024e0:	10800044 	addi	r2,r2,1
  8024e4:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8024e8:	e0bffd17 	ldw	r2,-12(fp)
  8024ec:	10c00044 	addi	r3,r2,1
  8024f0:	e0fffd15 	stw	r3,-12(fp)
  8024f4:	e0fffc17 	ldw	r3,-16(fp)
  8024f8:	18c00217 	ldw	r3,8(r3)
  8024fc:	e13ffc17 	ldw	r4,-16(fp)
  802500:	20c7883a 	add	r3,r4,r3
  802504:	18c00704 	addi	r3,r3,28
  802508:	18c00003 	ldbu	r3,0(r3)
  80250c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  802510:	e0bffc17 	ldw	r2,-16(fp)
  802514:	10800217 	ldw	r2,8(r2)
  802518:	10800044 	addi	r2,r2,1
  80251c:	10c00fcc 	andi	r3,r2,63
  802520:	e0bffc17 	ldw	r2,-16(fp)
  802524:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  802528:	e0fff517 	ldw	r3,-44(fp)
  80252c:	e0bffe17 	ldw	r2,-8(fp)
  802530:	1880050e 	bge	r3,r2,802548 <altera_avalon_uart_read+0xac>
  802534:	e0bffc17 	ldw	r2,-16(fp)
  802538:	10c00217 	ldw	r3,8(r2)
  80253c:	e0bffc17 	ldw	r2,-16(fp)
  802540:	10800317 	ldw	r2,12(r2)
  802544:	18bfe51e 	bne	r3,r2,8024dc <__alt_data_end+0xff8024dc>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  802548:	e0bff517 	ldw	r2,-44(fp)
  80254c:	1000251e 	bne	r2,zero,8025e4 <altera_avalon_uart_read+0x148>
  802550:	e0bffc17 	ldw	r2,-16(fp)
  802554:	10c00217 	ldw	r3,8(r2)
  802558:	e0bffc17 	ldw	r2,-16(fp)
  80255c:	10800317 	ldw	r2,12(r2)
  802560:	1880201e 	bne	r3,r2,8025e4 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  802564:	e0bff617 	ldw	r2,-40(fp)
  802568:	1000071e 	bne	r2,zero,802588 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80256c:	080244c0 	call	80244c <alt_get_errno>
  802570:	1007883a 	mov	r3,r2
  802574:	008002c4 	movi	r2,11
  802578:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80257c:	00800044 	movi	r2,1
  802580:	e0bff405 	stb	r2,-48(fp)
        break;
  802584:	00001b06 	br	8025f4 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802588:	0005303a 	rdctl	r2,status
  80258c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802590:	e0fff817 	ldw	r3,-32(fp)
  802594:	00bfff84 	movi	r2,-2
  802598:	1884703a 	and	r2,r3,r2
  80259c:	1001703a 	wrctl	status,r2
  
  return context;
  8025a0:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8025a4:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8025a8:	e0bffc17 	ldw	r2,-16(fp)
  8025ac:	10800117 	ldw	r2,4(r2)
  8025b0:	10c02014 	ori	r3,r2,128
  8025b4:	e0bffc17 	ldw	r2,-16(fp)
  8025b8:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8025bc:	e0bffc17 	ldw	r2,-16(fp)
  8025c0:	10800017 	ldw	r2,0(r2)
  8025c4:	10800304 	addi	r2,r2,12
  8025c8:	e0fffc17 	ldw	r3,-16(fp)
  8025cc:	18c00117 	ldw	r3,4(r3)
  8025d0:	10c00035 	stwio	r3,0(r2)
  8025d4:	e0bff717 	ldw	r2,-36(fp)
  8025d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8025dc:	e0bff917 	ldw	r2,-28(fp)
  8025e0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8025e4:	e0bff517 	ldw	r2,-44(fp)
  8025e8:	1000021e 	bne	r2,zero,8025f4 <altera_avalon_uart_read+0x158>
  8025ec:	e0bffe17 	ldw	r2,-8(fp)
  8025f0:	103fb91e 	bne	r2,zero,8024d8 <__alt_data_end+0xff8024d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8025f4:	0005303a 	rdctl	r2,status
  8025f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8025fc:	e0fffa17 	ldw	r3,-24(fp)
  802600:	00bfff84 	movi	r2,-2
  802604:	1884703a 	and	r2,r3,r2
  802608:	1001703a 	wrctl	status,r2
  
  return context;
  80260c:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  802610:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802614:	e0bffc17 	ldw	r2,-16(fp)
  802618:	10800117 	ldw	r2,4(r2)
  80261c:	10c02014 	ori	r3,r2,128
  802620:	e0bffc17 	ldw	r2,-16(fp)
  802624:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802628:	e0bffc17 	ldw	r2,-16(fp)
  80262c:	10800017 	ldw	r2,0(r2)
  802630:	10800304 	addi	r2,r2,12
  802634:	e0fffc17 	ldw	r3,-16(fp)
  802638:	18c00117 	ldw	r3,4(r3)
  80263c:	10c00035 	stwio	r3,0(r2)
  802640:	e0bff717 	ldw	r2,-36(fp)
  802644:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802648:	e0bffb17 	ldw	r2,-20(fp)
  80264c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  802650:	e0bff403 	ldbu	r2,-48(fp)
  802654:	10000226 	beq	r2,zero,802660 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  802658:	00bffd44 	movi	r2,-11
  80265c:	00000106 	br	802664 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  802660:	e0bff517 	ldw	r2,-44(fp)
  }
}
  802664:	e037883a 	mov	sp,fp
  802668:	dfc00117 	ldw	ra,4(sp)
  80266c:	df000017 	ldw	fp,0(sp)
  802670:	dec00204 	addi	sp,sp,8
  802674:	f800283a 	ret

00802678 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802678:	defffe04 	addi	sp,sp,-8
  80267c:	dfc00115 	stw	ra,4(sp)
  802680:	df000015 	stw	fp,0(sp)
  802684:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802688:	00802034 	movhi	r2,128
  80268c:	10973b04 	addi	r2,r2,23788
  802690:	10800017 	ldw	r2,0(r2)
  802694:	10000526 	beq	r2,zero,8026ac <alt_get_errno+0x34>
  802698:	00802034 	movhi	r2,128
  80269c:	10973b04 	addi	r2,r2,23788
  8026a0:	10800017 	ldw	r2,0(r2)
  8026a4:	103ee83a 	callr	r2
  8026a8:	00000206 	br	8026b4 <alt_get_errno+0x3c>
  8026ac:	00802034 	movhi	r2,128
  8026b0:	109d7204 	addi	r2,r2,30152
}
  8026b4:	e037883a 	mov	sp,fp
  8026b8:	dfc00117 	ldw	ra,4(sp)
  8026bc:	df000017 	ldw	fp,0(sp)
  8026c0:	dec00204 	addi	sp,sp,8
  8026c4:	f800283a 	ret

008026c8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8026c8:	defff204 	addi	sp,sp,-56
  8026cc:	dfc00d15 	stw	ra,52(sp)
  8026d0:	df000c15 	stw	fp,48(sp)
  8026d4:	df000c04 	addi	fp,sp,48
  8026d8:	e13ffc15 	stw	r4,-16(fp)
  8026dc:	e17ffd15 	stw	r5,-12(fp)
  8026e0:	e1bffe15 	stw	r6,-8(fp)
  8026e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8026e8:	e0bffe17 	ldw	r2,-8(fp)
  8026ec:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8026f0:	e0bfff17 	ldw	r2,-4(fp)
  8026f4:	1090000c 	andi	r2,r2,16384
  8026f8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8026fc:	00003c06 	br	8027f0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802700:	e0bffc17 	ldw	r2,-16(fp)
  802704:	10800517 	ldw	r2,20(r2)
  802708:	10800044 	addi	r2,r2,1
  80270c:	10800fcc 	andi	r2,r2,63
  802710:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  802714:	e0bffc17 	ldw	r2,-16(fp)
  802718:	10c00417 	ldw	r3,16(r2)
  80271c:	e0bff617 	ldw	r2,-40(fp)
  802720:	1880221e 	bne	r3,r2,8027ac <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  802724:	e0bff517 	ldw	r2,-44(fp)
  802728:	10000526 	beq	r2,zero,802740 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80272c:	08026780 	call	802678 <alt_get_errno>
  802730:	1007883a 	mov	r3,r2
  802734:	008002c4 	movi	r2,11
  802738:	18800015 	stw	r2,0(r3)
        break;
  80273c:	00002e06 	br	8027f8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802740:	0005303a 	rdctl	r2,status
  802744:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802748:	e0fff817 	ldw	r3,-32(fp)
  80274c:	00bfff84 	movi	r2,-2
  802750:	1884703a 	and	r2,r3,r2
  802754:	1001703a 	wrctl	status,r2
  
  return context;
  802758:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80275c:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802760:	e0bffc17 	ldw	r2,-16(fp)
  802764:	10800117 	ldw	r2,4(r2)
  802768:	10c11014 	ori	r3,r2,1088
  80276c:	e0bffc17 	ldw	r2,-16(fp)
  802770:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802774:	e0bffc17 	ldw	r2,-16(fp)
  802778:	10800017 	ldw	r2,0(r2)
  80277c:	10800304 	addi	r2,r2,12
  802780:	e0fffc17 	ldw	r3,-16(fp)
  802784:	18c00117 	ldw	r3,4(r3)
  802788:	10c00035 	stwio	r3,0(r2)
  80278c:	e0bff717 	ldw	r2,-36(fp)
  802790:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802794:	e0bff917 	ldw	r2,-28(fp)
  802798:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80279c:	e0bffc17 	ldw	r2,-16(fp)
  8027a0:	10c00417 	ldw	r3,16(r2)
  8027a4:	e0bff617 	ldw	r2,-40(fp)
  8027a8:	18bffc26 	beq	r3,r2,80279c <__alt_data_end+0xff80279c>
      }
    }

    count--;
  8027ac:	e0bff417 	ldw	r2,-48(fp)
  8027b0:	10bfffc4 	addi	r2,r2,-1
  8027b4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8027b8:	e0bffc17 	ldw	r2,-16(fp)
  8027bc:	10c00517 	ldw	r3,20(r2)
  8027c0:	e0bffd17 	ldw	r2,-12(fp)
  8027c4:	11000044 	addi	r4,r2,1
  8027c8:	e13ffd15 	stw	r4,-12(fp)
  8027cc:	10800003 	ldbu	r2,0(r2)
  8027d0:	1009883a 	mov	r4,r2
  8027d4:	e0bffc17 	ldw	r2,-16(fp)
  8027d8:	10c5883a 	add	r2,r2,r3
  8027dc:	10801704 	addi	r2,r2,92
  8027e0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8027e4:	e0bffc17 	ldw	r2,-16(fp)
  8027e8:	e0fff617 	ldw	r3,-40(fp)
  8027ec:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8027f0:	e0bff417 	ldw	r2,-48(fp)
  8027f4:	103fc21e 	bne	r2,zero,802700 <__alt_data_end+0xff802700>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8027f8:	0005303a 	rdctl	r2,status
  8027fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802800:	e0fffa17 	ldw	r3,-24(fp)
  802804:	00bfff84 	movi	r2,-2
  802808:	1884703a 	and	r2,r3,r2
  80280c:	1001703a 	wrctl	status,r2
  
  return context;
  802810:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  802814:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802818:	e0bffc17 	ldw	r2,-16(fp)
  80281c:	10800117 	ldw	r2,4(r2)
  802820:	10c11014 	ori	r3,r2,1088
  802824:	e0bffc17 	ldw	r2,-16(fp)
  802828:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80282c:	e0bffc17 	ldw	r2,-16(fp)
  802830:	10800017 	ldw	r2,0(r2)
  802834:	10800304 	addi	r2,r2,12
  802838:	e0fffc17 	ldw	r3,-16(fp)
  80283c:	18c00117 	ldw	r3,4(r3)
  802840:	10c00035 	stwio	r3,0(r2)
  802844:	e0bff717 	ldw	r2,-36(fp)
  802848:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80284c:	e0bffb17 	ldw	r2,-20(fp)
  802850:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  802854:	e0fffe17 	ldw	r3,-8(fp)
  802858:	e0bff417 	ldw	r2,-48(fp)
  80285c:	1885c83a 	sub	r2,r3,r2
}
  802860:	e037883a 	mov	sp,fp
  802864:	dfc00117 	ldw	ra,4(sp)
  802868:	df000017 	ldw	fp,0(sp)
  80286c:	dec00204 	addi	sp,sp,8
  802870:	f800283a 	ret

00802874 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  802874:	defff504 	addi	sp,sp,-44
  802878:	df000a15 	stw	fp,40(sp)
  80287c:	df000a04 	addi	fp,sp,40
  802880:	e13ffc15 	stw	r4,-16(fp)
  802884:	e17ffd15 	stw	r5,-12(fp)
  802888:	e1bffe15 	stw	r6,-8(fp)
  80288c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  802890:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  802894:	00802034 	movhi	r2,128
  802898:	109d6f04 	addi	r2,r2,30140
  80289c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8028a0:	10003f26 	beq	r2,zero,8029a0 <alt_alarm_start+0x12c>
  {
    if (alarm)
  8028a4:	e0bffc17 	ldw	r2,-16(fp)
  8028a8:	10003b26 	beq	r2,zero,802998 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  8028ac:	e0bffc17 	ldw	r2,-16(fp)
  8028b0:	e0fffe17 	ldw	r3,-8(fp)
  8028b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  8028b8:	e0bffc17 	ldw	r2,-16(fp)
  8028bc:	e0ffff17 	ldw	r3,-4(fp)
  8028c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8028c4:	0005303a 	rdctl	r2,status
  8028c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8028cc:	e0fff817 	ldw	r3,-32(fp)
  8028d0:	00bfff84 	movi	r2,-2
  8028d4:	1884703a 	and	r2,r3,r2
  8028d8:	1001703a 	wrctl	status,r2
  
  return context;
  8028dc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8028e0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8028e4:	00802034 	movhi	r2,128
  8028e8:	109d7004 	addi	r2,r2,30144
  8028ec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8028f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8028f4:	e0fffd17 	ldw	r3,-12(fp)
  8028f8:	e0bff617 	ldw	r2,-40(fp)
  8028fc:	1885883a 	add	r2,r3,r2
  802900:	10c00044 	addi	r3,r2,1
  802904:	e0bffc17 	ldw	r2,-16(fp)
  802908:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80290c:	e0bffc17 	ldw	r2,-16(fp)
  802910:	10c00217 	ldw	r3,8(r2)
  802914:	e0bff617 	ldw	r2,-40(fp)
  802918:	1880042e 	bgeu	r3,r2,80292c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  80291c:	e0bffc17 	ldw	r2,-16(fp)
  802920:	00c00044 	movi	r3,1
  802924:	10c00405 	stb	r3,16(r2)
  802928:	00000206 	br	802934 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  80292c:	e0bffc17 	ldw	r2,-16(fp)
  802930:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  802934:	e0fffc17 	ldw	r3,-16(fp)
  802938:	00802034 	movhi	r2,128
  80293c:	10973d04 	addi	r2,r2,23796
  802940:	e0bff915 	stw	r2,-28(fp)
  802944:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802948:	e0bffa17 	ldw	r2,-24(fp)
  80294c:	e0fff917 	ldw	r3,-28(fp)
  802950:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802954:	e0bff917 	ldw	r2,-28(fp)
  802958:	10c00017 	ldw	r3,0(r2)
  80295c:	e0bffa17 	ldw	r2,-24(fp)
  802960:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802964:	e0bff917 	ldw	r2,-28(fp)
  802968:	10800017 	ldw	r2,0(r2)
  80296c:	e0fffa17 	ldw	r3,-24(fp)
  802970:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802974:	e0bff917 	ldw	r2,-28(fp)
  802978:	e0fffa17 	ldw	r3,-24(fp)
  80297c:	10c00015 	stw	r3,0(r2)
  802980:	e0bff717 	ldw	r2,-36(fp)
  802984:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802988:	e0bffb17 	ldw	r2,-20(fp)
  80298c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  802990:	0005883a 	mov	r2,zero
  802994:	00000306 	br	8029a4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  802998:	00bffa84 	movi	r2,-22
  80299c:	00000106 	br	8029a4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  8029a0:	00bfde84 	movi	r2,-134
  }
}
  8029a4:	e037883a 	mov	sp,fp
  8029a8:	df000017 	ldw	fp,0(sp)
  8029ac:	dec00104 	addi	sp,sp,4
  8029b0:	f800283a 	ret

008029b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8029b4:	defffe04 	addi	sp,sp,-8
  8029b8:	dfc00115 	stw	ra,4(sp)
  8029bc:	df000015 	stw	fp,0(sp)
  8029c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8029c4:	00802034 	movhi	r2,128
  8029c8:	10973b04 	addi	r2,r2,23788
  8029cc:	10800017 	ldw	r2,0(r2)
  8029d0:	10000526 	beq	r2,zero,8029e8 <alt_get_errno+0x34>
  8029d4:	00802034 	movhi	r2,128
  8029d8:	10973b04 	addi	r2,r2,23788
  8029dc:	10800017 	ldw	r2,0(r2)
  8029e0:	103ee83a 	callr	r2
  8029e4:	00000206 	br	8029f0 <alt_get_errno+0x3c>
  8029e8:	00802034 	movhi	r2,128
  8029ec:	109d7204 	addi	r2,r2,30152
}
  8029f0:	e037883a 	mov	sp,fp
  8029f4:	dfc00117 	ldw	ra,4(sp)
  8029f8:	df000017 	ldw	fp,0(sp)
  8029fc:	dec00204 	addi	sp,sp,8
  802a00:	f800283a 	ret

00802a04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802a04:	defffb04 	addi	sp,sp,-20
  802a08:	dfc00415 	stw	ra,16(sp)
  802a0c:	df000315 	stw	fp,12(sp)
  802a10:	df000304 	addi	fp,sp,12
  802a14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802a18:	e0bfff17 	ldw	r2,-4(fp)
  802a1c:	10000616 	blt	r2,zero,802a38 <close+0x34>
  802a20:	e0bfff17 	ldw	r2,-4(fp)
  802a24:	10c00324 	muli	r3,r2,12
  802a28:	00802034 	movhi	r2,128
  802a2c:	1095cc04 	addi	r2,r2,22320
  802a30:	1885883a 	add	r2,r3,r2
  802a34:	00000106 	br	802a3c <close+0x38>
  802a38:	0005883a 	mov	r2,zero
  802a3c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802a40:	e0bffd17 	ldw	r2,-12(fp)
  802a44:	10001926 	beq	r2,zero,802aac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802a48:	e0bffd17 	ldw	r2,-12(fp)
  802a4c:	10800017 	ldw	r2,0(r2)
  802a50:	10800417 	ldw	r2,16(r2)
  802a54:	10000626 	beq	r2,zero,802a70 <close+0x6c>
  802a58:	e0bffd17 	ldw	r2,-12(fp)
  802a5c:	10800017 	ldw	r2,0(r2)
  802a60:	10800417 	ldw	r2,16(r2)
  802a64:	e13ffd17 	ldw	r4,-12(fp)
  802a68:	103ee83a 	callr	r2
  802a6c:	00000106 	br	802a74 <close+0x70>
  802a70:	0005883a 	mov	r2,zero
  802a74:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802a78:	e13fff17 	ldw	r4,-4(fp)
  802a7c:	080327c0 	call	80327c <alt_release_fd>
    if (rval < 0)
  802a80:	e0bffe17 	ldw	r2,-8(fp)
  802a84:	1000070e 	bge	r2,zero,802aa4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  802a88:	08029b40 	call	8029b4 <alt_get_errno>
  802a8c:	1007883a 	mov	r3,r2
  802a90:	e0bffe17 	ldw	r2,-8(fp)
  802a94:	0085c83a 	sub	r2,zero,r2
  802a98:	18800015 	stw	r2,0(r3)
      return -1;
  802a9c:	00bfffc4 	movi	r2,-1
  802aa0:	00000706 	br	802ac0 <close+0xbc>
    }
    return 0;
  802aa4:	0005883a 	mov	r2,zero
  802aa8:	00000506 	br	802ac0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802aac:	08029b40 	call	8029b4 <alt_get_errno>
  802ab0:	1007883a 	mov	r3,r2
  802ab4:	00801444 	movi	r2,81
  802ab8:	18800015 	stw	r2,0(r3)
    return -1;
  802abc:	00bfffc4 	movi	r2,-1
  }
}
  802ac0:	e037883a 	mov	sp,fp
  802ac4:	dfc00117 	ldw	ra,4(sp)
  802ac8:	df000017 	ldw	fp,0(sp)
  802acc:	dec00204 	addi	sp,sp,8
  802ad0:	f800283a 	ret

00802ad4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  802ad4:	defffe04 	addi	sp,sp,-8
  802ad8:	df000115 	stw	fp,4(sp)
  802adc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802ae0:	e03fff15 	stw	zero,-4(fp)
  802ae4:	00000506 	br	802afc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  802ae8:	e0bfff17 	ldw	r2,-4(fp)
  802aec:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802af0:	e0bfff17 	ldw	r2,-4(fp)
  802af4:	10800804 	addi	r2,r2,32
  802af8:	e0bfff15 	stw	r2,-4(fp)
  802afc:	e0bfff17 	ldw	r2,-4(fp)
  802b00:	10820030 	cmpltui	r2,r2,2048
  802b04:	103ff81e 	bne	r2,zero,802ae8 <__alt_data_end+0xff802ae8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  802b08:	e037883a 	mov	sp,fp
  802b0c:	df000017 	ldw	fp,0(sp)
  802b10:	dec00104 	addi	sp,sp,4
  802b14:	f800283a 	ret

00802b18 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802b18:	defffc04 	addi	sp,sp,-16
  802b1c:	df000315 	stw	fp,12(sp)
  802b20:	df000304 	addi	fp,sp,12
  802b24:	e13ffd15 	stw	r4,-12(fp)
  802b28:	e17ffe15 	stw	r5,-8(fp)
  802b2c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802b30:	e0bfff17 	ldw	r2,-4(fp)
}
  802b34:	e037883a 	mov	sp,fp
  802b38:	df000017 	ldw	fp,0(sp)
  802b3c:	dec00104 	addi	sp,sp,4
  802b40:	f800283a 	ret

00802b44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802b44:	defffe04 	addi	sp,sp,-8
  802b48:	dfc00115 	stw	ra,4(sp)
  802b4c:	df000015 	stw	fp,0(sp)
  802b50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802b54:	00802034 	movhi	r2,128
  802b58:	10973b04 	addi	r2,r2,23788
  802b5c:	10800017 	ldw	r2,0(r2)
  802b60:	10000526 	beq	r2,zero,802b78 <alt_get_errno+0x34>
  802b64:	00802034 	movhi	r2,128
  802b68:	10973b04 	addi	r2,r2,23788
  802b6c:	10800017 	ldw	r2,0(r2)
  802b70:	103ee83a 	callr	r2
  802b74:	00000206 	br	802b80 <alt_get_errno+0x3c>
  802b78:	00802034 	movhi	r2,128
  802b7c:	109d7204 	addi	r2,r2,30152
}
  802b80:	e037883a 	mov	sp,fp
  802b84:	dfc00117 	ldw	ra,4(sp)
  802b88:	df000017 	ldw	fp,0(sp)
  802b8c:	dec00204 	addi	sp,sp,8
  802b90:	f800283a 	ret

00802b94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  802b94:	defffa04 	addi	sp,sp,-24
  802b98:	dfc00515 	stw	ra,20(sp)
  802b9c:	df000415 	stw	fp,16(sp)
  802ba0:	df000404 	addi	fp,sp,16
  802ba4:	e13ffe15 	stw	r4,-8(fp)
  802ba8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  802bac:	e0bffe17 	ldw	r2,-8(fp)
  802bb0:	10000326 	beq	r2,zero,802bc0 <alt_dev_llist_insert+0x2c>
  802bb4:	e0bffe17 	ldw	r2,-8(fp)
  802bb8:	10800217 	ldw	r2,8(r2)
  802bbc:	1000061e 	bne	r2,zero,802bd8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  802bc0:	0802b440 	call	802b44 <alt_get_errno>
  802bc4:	1007883a 	mov	r3,r2
  802bc8:	00800584 	movi	r2,22
  802bcc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  802bd0:	00bffa84 	movi	r2,-22
  802bd4:	00001306 	br	802c24 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  802bd8:	e0bffe17 	ldw	r2,-8(fp)
  802bdc:	e0ffff17 	ldw	r3,-4(fp)
  802be0:	e0fffc15 	stw	r3,-16(fp)
  802be4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802be8:	e0bffd17 	ldw	r2,-12(fp)
  802bec:	e0fffc17 	ldw	r3,-16(fp)
  802bf0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802bf4:	e0bffc17 	ldw	r2,-16(fp)
  802bf8:	10c00017 	ldw	r3,0(r2)
  802bfc:	e0bffd17 	ldw	r2,-12(fp)
  802c00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802c04:	e0bffc17 	ldw	r2,-16(fp)
  802c08:	10800017 	ldw	r2,0(r2)
  802c0c:	e0fffd17 	ldw	r3,-12(fp)
  802c10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802c14:	e0bffc17 	ldw	r2,-16(fp)
  802c18:	e0fffd17 	ldw	r3,-12(fp)
  802c1c:	10c00015 	stw	r3,0(r2)

  return 0;  
  802c20:	0005883a 	mov	r2,zero
}
  802c24:	e037883a 	mov	sp,fp
  802c28:	dfc00117 	ldw	ra,4(sp)
  802c2c:	df000017 	ldw	fp,0(sp)
  802c30:	dec00204 	addi	sp,sp,8
  802c34:	f800283a 	ret

00802c38 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  802c38:	defffd04 	addi	sp,sp,-12
  802c3c:	dfc00215 	stw	ra,8(sp)
  802c40:	df000115 	stw	fp,4(sp)
  802c44:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  802c48:	00802034 	movhi	r2,128
  802c4c:	10905804 	addi	r2,r2,16736
  802c50:	e0bfff15 	stw	r2,-4(fp)
  802c54:	00000606 	br	802c70 <_do_ctors+0x38>
        (*ctor) (); 
  802c58:	e0bfff17 	ldw	r2,-4(fp)
  802c5c:	10800017 	ldw	r2,0(r2)
  802c60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  802c64:	e0bfff17 	ldw	r2,-4(fp)
  802c68:	10bfff04 	addi	r2,r2,-4
  802c6c:	e0bfff15 	stw	r2,-4(fp)
  802c70:	e0ffff17 	ldw	r3,-4(fp)
  802c74:	00802034 	movhi	r2,128
  802c78:	10905904 	addi	r2,r2,16740
  802c7c:	18bff62e 	bgeu	r3,r2,802c58 <__alt_data_end+0xff802c58>
        (*ctor) (); 
}
  802c80:	e037883a 	mov	sp,fp
  802c84:	dfc00117 	ldw	ra,4(sp)
  802c88:	df000017 	ldw	fp,0(sp)
  802c8c:	dec00204 	addi	sp,sp,8
  802c90:	f800283a 	ret

00802c94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  802c94:	defffd04 	addi	sp,sp,-12
  802c98:	dfc00215 	stw	ra,8(sp)
  802c9c:	df000115 	stw	fp,4(sp)
  802ca0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  802ca4:	00802034 	movhi	r2,128
  802ca8:	10905804 	addi	r2,r2,16736
  802cac:	e0bfff15 	stw	r2,-4(fp)
  802cb0:	00000606 	br	802ccc <_do_dtors+0x38>
        (*dtor) (); 
  802cb4:	e0bfff17 	ldw	r2,-4(fp)
  802cb8:	10800017 	ldw	r2,0(r2)
  802cbc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  802cc0:	e0bfff17 	ldw	r2,-4(fp)
  802cc4:	10bfff04 	addi	r2,r2,-4
  802cc8:	e0bfff15 	stw	r2,-4(fp)
  802ccc:	e0ffff17 	ldw	r3,-4(fp)
  802cd0:	00802034 	movhi	r2,128
  802cd4:	10905904 	addi	r2,r2,16740
  802cd8:	18bff62e 	bgeu	r3,r2,802cb4 <__alt_data_end+0xff802cb4>
        (*dtor) (); 
}
  802cdc:	e037883a 	mov	sp,fp
  802ce0:	dfc00117 	ldw	ra,4(sp)
  802ce4:	df000017 	ldw	fp,0(sp)
  802ce8:	dec00204 	addi	sp,sp,8
  802cec:	f800283a 	ret

00802cf0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  802cf0:	defffe04 	addi	sp,sp,-8
  802cf4:	dfc00115 	stw	ra,4(sp)
  802cf8:	df000015 	stw	fp,0(sp)
  802cfc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  802d00:	0009883a 	mov	r4,zero
  802d04:	01440004 	movi	r5,4096
  802d08:	08038780 	call	803878 <alt_icache_flush>
#endif
}
  802d0c:	e037883a 	mov	sp,fp
  802d10:	dfc00117 	ldw	ra,4(sp)
  802d14:	df000017 	ldw	fp,0(sp)
  802d18:	dec00204 	addi	sp,sp,8
  802d1c:	f800283a 	ret

00802d20 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  802d20:	defff904 	addi	sp,sp,-28
  802d24:	dfc00615 	stw	ra,24(sp)
  802d28:	df000515 	stw	fp,20(sp)
  802d2c:	df000504 	addi	fp,sp,20
  802d30:	e13ffc15 	stw	r4,-16(fp)
  802d34:	e17ffd15 	stw	r5,-12(fp)
  802d38:	e1bffe15 	stw	r6,-8(fp)
  802d3c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  802d40:	e13ffd17 	ldw	r4,-12(fp)
  802d44:	e17ffe17 	ldw	r5,-8(fp)
  802d48:	e1bfff17 	ldw	r6,-4(fp)
  802d4c:	08031240 	call	803124 <open>
  802d50:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  802d54:	e0bffb17 	ldw	r2,-20(fp)
  802d58:	10001c16 	blt	r2,zero,802dcc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  802d5c:	00802034 	movhi	r2,128
  802d60:	1095cc04 	addi	r2,r2,22320
  802d64:	e0fffb17 	ldw	r3,-20(fp)
  802d68:	18c00324 	muli	r3,r3,12
  802d6c:	10c5883a 	add	r2,r2,r3
  802d70:	10c00017 	ldw	r3,0(r2)
  802d74:	e0bffc17 	ldw	r2,-16(fp)
  802d78:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  802d7c:	00802034 	movhi	r2,128
  802d80:	1095cc04 	addi	r2,r2,22320
  802d84:	e0fffb17 	ldw	r3,-20(fp)
  802d88:	18c00324 	muli	r3,r3,12
  802d8c:	18c00104 	addi	r3,r3,4
  802d90:	10c5883a 	add	r2,r2,r3
  802d94:	10c00017 	ldw	r3,0(r2)
  802d98:	e0bffc17 	ldw	r2,-16(fp)
  802d9c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  802da0:	00802034 	movhi	r2,128
  802da4:	1095cc04 	addi	r2,r2,22320
  802da8:	e0fffb17 	ldw	r3,-20(fp)
  802dac:	18c00324 	muli	r3,r3,12
  802db0:	18c00204 	addi	r3,r3,8
  802db4:	10c5883a 	add	r2,r2,r3
  802db8:	10c00017 	ldw	r3,0(r2)
  802dbc:	e0bffc17 	ldw	r2,-16(fp)
  802dc0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  802dc4:	e13ffb17 	ldw	r4,-20(fp)
  802dc8:	080327c0 	call	80327c <alt_release_fd>
  }
} 
  802dcc:	e037883a 	mov	sp,fp
  802dd0:	dfc00117 	ldw	ra,4(sp)
  802dd4:	df000017 	ldw	fp,0(sp)
  802dd8:	dec00204 	addi	sp,sp,8
  802ddc:	f800283a 	ret

00802de0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  802de0:	defffb04 	addi	sp,sp,-20
  802de4:	dfc00415 	stw	ra,16(sp)
  802de8:	df000315 	stw	fp,12(sp)
  802dec:	df000304 	addi	fp,sp,12
  802df0:	e13ffd15 	stw	r4,-12(fp)
  802df4:	e17ffe15 	stw	r5,-8(fp)
  802df8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  802dfc:	01002034 	movhi	r4,128
  802e00:	2115cf04 	addi	r4,r4,22332
  802e04:	e17ffd17 	ldw	r5,-12(fp)
  802e08:	01800044 	movi	r6,1
  802e0c:	01c07fc4 	movi	r7,511
  802e10:	0802d200 	call	802d20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  802e14:	01002034 	movhi	r4,128
  802e18:	2115cc04 	addi	r4,r4,22320
  802e1c:	e17ffe17 	ldw	r5,-8(fp)
  802e20:	000d883a 	mov	r6,zero
  802e24:	01c07fc4 	movi	r7,511
  802e28:	0802d200 	call	802d20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  802e2c:	01002034 	movhi	r4,128
  802e30:	2115d204 	addi	r4,r4,22344
  802e34:	e17fff17 	ldw	r5,-4(fp)
  802e38:	01800044 	movi	r6,1
  802e3c:	01c07fc4 	movi	r7,511
  802e40:	0802d200 	call	802d20 <alt_open_fd>
}  
  802e44:	e037883a 	mov	sp,fp
  802e48:	dfc00117 	ldw	ra,4(sp)
  802e4c:	df000017 	ldw	fp,0(sp)
  802e50:	dec00204 	addi	sp,sp,8
  802e54:	f800283a 	ret

00802e58 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  802e58:	defff004 	addi	sp,sp,-64
  802e5c:	df000f15 	stw	fp,60(sp)
  802e60:	df000f04 	addi	fp,sp,60
  802e64:	e13ffd15 	stw	r4,-12(fp)
  802e68:	e17ffe15 	stw	r5,-8(fp)
  802e6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  802e70:	00bffa84 	movi	r2,-22
  802e74:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  802e78:	e0bffd17 	ldw	r2,-12(fp)
  802e7c:	10800828 	cmpgeui	r2,r2,32
  802e80:	10005c1e 	bne	r2,zero,802ff4 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802e84:	0005303a 	rdctl	r2,status
  802e88:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802e8c:	e0fff317 	ldw	r3,-52(fp)
  802e90:	00bfff84 	movi	r2,-2
  802e94:	1884703a 	and	r2,r3,r2
  802e98:	1001703a 	wrctl	status,r2
  
  return context;
  802e9c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  802ea0:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
  802ea4:	00802034 	movhi	r2,128
  802ea8:	109d7304 	addi	r2,r2,30156
  802eac:	e0fffd17 	ldw	r3,-12(fp)
  802eb0:	180690fa 	slli	r3,r3,3
  802eb4:	10c5883a 	add	r2,r2,r3
  802eb8:	e0ffff17 	ldw	r3,-4(fp)
  802ebc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  802ec0:	00802034 	movhi	r2,128
  802ec4:	109d7304 	addi	r2,r2,30156
  802ec8:	e0fffd17 	ldw	r3,-12(fp)
  802ecc:	180690fa 	slli	r3,r3,3
  802ed0:	18c00104 	addi	r3,r3,4
  802ed4:	10c5883a 	add	r2,r2,r3
  802ed8:	e0fffe17 	ldw	r3,-8(fp)
  802edc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  802ee0:	e0bfff17 	ldw	r2,-4(fp)
  802ee4:	10001f26 	beq	r2,zero,802f64 <alt_irq_register+0x10c>
  802ee8:	e0bffd17 	ldw	r2,-12(fp)
  802eec:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802ef0:	0005303a 	rdctl	r2,status
  802ef4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802ef8:	e0fff517 	ldw	r3,-44(fp)
  802efc:	00bfff84 	movi	r2,-2
  802f00:	1884703a 	and	r2,r3,r2
  802f04:	1001703a 	wrctl	status,r2
  
  return context;
  802f08:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  802f0c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
  802f10:	e0bff417 	ldw	r2,-48(fp)
  802f14:	00c00044 	movi	r3,1
  802f18:	1884983a 	sll	r2,r3,r2
  802f1c:	1007883a 	mov	r3,r2
  802f20:	00802034 	movhi	r2,128
  802f24:	109d6e04 	addi	r2,r2,30136
  802f28:	10800017 	ldw	r2,0(r2)
  802f2c:	1886b03a 	or	r3,r3,r2
  802f30:	00802034 	movhi	r2,128
  802f34:	109d6e04 	addi	r2,r2,30136
  802f38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802f3c:	00802034 	movhi	r2,128
  802f40:	109d6e04 	addi	r2,r2,30136
  802f44:	10800017 	ldw	r2,0(r2)
  802f48:	100170fa 	wrctl	ienable,r2
  802f4c:	e0bff617 	ldw	r2,-40(fp)
  802f50:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802f54:	e0bff717 	ldw	r2,-36(fp)
  802f58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  802f5c:	0005883a 	mov	r2,zero
  802f60:	00001f06 	br	802fe0 <alt_irq_register+0x188>
  802f64:	e0bffd17 	ldw	r2,-12(fp)
  802f68:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802f6c:	0005303a 	rdctl	r2,status
  802f70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802f74:	e0fff917 	ldw	r3,-28(fp)
  802f78:	00bfff84 	movi	r2,-2
  802f7c:	1884703a 	and	r2,r3,r2
  802f80:	1001703a 	wrctl	status,r2
  
  return context;
  802f84:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  802f88:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
  802f8c:	e0bff817 	ldw	r2,-32(fp)
  802f90:	00c00044 	movi	r3,1
  802f94:	1884983a 	sll	r2,r3,r2
  802f98:	0084303a 	nor	r2,zero,r2
  802f9c:	1007883a 	mov	r3,r2
  802fa0:	00802034 	movhi	r2,128
  802fa4:	109d6e04 	addi	r2,r2,30136
  802fa8:	10800017 	ldw	r2,0(r2)
  802fac:	1886703a 	and	r3,r3,r2
  802fb0:	00802034 	movhi	r2,128
  802fb4:	109d6e04 	addi	r2,r2,30136
  802fb8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802fbc:	00802034 	movhi	r2,128
  802fc0:	109d6e04 	addi	r2,r2,30136
  802fc4:	10800017 	ldw	r2,0(r2)
  802fc8:	100170fa 	wrctl	ienable,r2
  802fcc:	e0bffa17 	ldw	r2,-24(fp)
  802fd0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802fd4:	e0bffb17 	ldw	r2,-20(fp)
  802fd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  802fdc:	0005883a 	mov	r2,zero
  802fe0:	e0bff115 	stw	r2,-60(fp)
  802fe4:	e0bff217 	ldw	r2,-56(fp)
  802fe8:	e0bffc15 	stw	r2,-16(fp)
  802fec:	e0bffc17 	ldw	r2,-16(fp)
  802ff0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  802ff4:	e0bff117 	ldw	r2,-60(fp)
}
  802ff8:	e037883a 	mov	sp,fp
  802ffc:	df000017 	ldw	fp,0(sp)
  803000:	dec00104 	addi	sp,sp,4
  803004:	f800283a 	ret

00803008 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803008:	defffe04 	addi	sp,sp,-8
  80300c:	dfc00115 	stw	ra,4(sp)
  803010:	df000015 	stw	fp,0(sp)
  803014:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  803018:	00802034 	movhi	r2,128
  80301c:	10973b04 	addi	r2,r2,23788
  803020:	10800017 	ldw	r2,0(r2)
  803024:	10000526 	beq	r2,zero,80303c <alt_get_errno+0x34>
  803028:	00802034 	movhi	r2,128
  80302c:	10973b04 	addi	r2,r2,23788
  803030:	10800017 	ldw	r2,0(r2)
  803034:	103ee83a 	callr	r2
  803038:	00000206 	br	803044 <alt_get_errno+0x3c>
  80303c:	00802034 	movhi	r2,128
  803040:	109d7204 	addi	r2,r2,30152
}
  803044:	e037883a 	mov	sp,fp
  803048:	dfc00117 	ldw	ra,4(sp)
  80304c:	df000017 	ldw	fp,0(sp)
  803050:	dec00204 	addi	sp,sp,8
  803054:	f800283a 	ret

00803058 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  803058:	defffd04 	addi	sp,sp,-12
  80305c:	df000215 	stw	fp,8(sp)
  803060:	df000204 	addi	fp,sp,8
  803064:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  803068:	e0bfff17 	ldw	r2,-4(fp)
  80306c:	10800217 	ldw	r2,8(r2)
  803070:	10d00034 	orhi	r3,r2,16384
  803074:	e0bfff17 	ldw	r2,-4(fp)
  803078:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80307c:	e03ffe15 	stw	zero,-8(fp)
  803080:	00001d06 	br	8030f8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803084:	00802034 	movhi	r2,128
  803088:	1095cc04 	addi	r2,r2,22320
  80308c:	e0fffe17 	ldw	r3,-8(fp)
  803090:	18c00324 	muli	r3,r3,12
  803094:	10c5883a 	add	r2,r2,r3
  803098:	10c00017 	ldw	r3,0(r2)
  80309c:	e0bfff17 	ldw	r2,-4(fp)
  8030a0:	10800017 	ldw	r2,0(r2)
  8030a4:	1880111e 	bne	r3,r2,8030ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8030a8:	00802034 	movhi	r2,128
  8030ac:	1095cc04 	addi	r2,r2,22320
  8030b0:	e0fffe17 	ldw	r3,-8(fp)
  8030b4:	18c00324 	muli	r3,r3,12
  8030b8:	18c00204 	addi	r3,r3,8
  8030bc:	10c5883a 	add	r2,r2,r3
  8030c0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8030c4:	1000090e 	bge	r2,zero,8030ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8030c8:	e0bffe17 	ldw	r2,-8(fp)
  8030cc:	10c00324 	muli	r3,r2,12
  8030d0:	00802034 	movhi	r2,128
  8030d4:	1095cc04 	addi	r2,r2,22320
  8030d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8030dc:	e0bfff17 	ldw	r2,-4(fp)
  8030e0:	18800226 	beq	r3,r2,8030ec <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8030e4:	00bffcc4 	movi	r2,-13
  8030e8:	00000a06 	br	803114 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8030ec:	e0bffe17 	ldw	r2,-8(fp)
  8030f0:	10800044 	addi	r2,r2,1
  8030f4:	e0bffe15 	stw	r2,-8(fp)
  8030f8:	00802034 	movhi	r2,128
  8030fc:	10973a04 	addi	r2,r2,23784
  803100:	10800017 	ldw	r2,0(r2)
  803104:	1007883a 	mov	r3,r2
  803108:	e0bffe17 	ldw	r2,-8(fp)
  80310c:	18bfdd2e 	bgeu	r3,r2,803084 <__alt_data_end+0xff803084>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  803110:	0005883a 	mov	r2,zero
}
  803114:	e037883a 	mov	sp,fp
  803118:	df000017 	ldw	fp,0(sp)
  80311c:	dec00104 	addi	sp,sp,4
  803120:	f800283a 	ret

00803124 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  803124:	defff604 	addi	sp,sp,-40
  803128:	dfc00915 	stw	ra,36(sp)
  80312c:	df000815 	stw	fp,32(sp)
  803130:	df000804 	addi	fp,sp,32
  803134:	e13ffd15 	stw	r4,-12(fp)
  803138:	e17ffe15 	stw	r5,-8(fp)
  80313c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  803140:	00bfffc4 	movi	r2,-1
  803144:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  803148:	00bffb44 	movi	r2,-19
  80314c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  803150:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  803154:	e13ffd17 	ldw	r4,-12(fp)
  803158:	01402034 	movhi	r5,128
  80315c:	29573804 	addi	r5,r5,23776
  803160:	08036200 	call	803620 <alt_find_dev>
  803164:	e0bff815 	stw	r2,-32(fp)
  803168:	e0bff817 	ldw	r2,-32(fp)
  80316c:	1000051e 	bne	r2,zero,803184 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  803170:	e13ffd17 	ldw	r4,-12(fp)
  803174:	08036b00 	call	8036b0 <alt_find_file>
  803178:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80317c:	00800044 	movi	r2,1
  803180:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  803184:	e0bff817 	ldw	r2,-32(fp)
  803188:	10002926 	beq	r2,zero,803230 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80318c:	e13ff817 	ldw	r4,-32(fp)
  803190:	08037c40 	call	8037c4 <alt_get_fd>
  803194:	e0bff915 	stw	r2,-28(fp)
  803198:	e0bff917 	ldw	r2,-28(fp)
  80319c:	1000030e 	bge	r2,zero,8031ac <open+0x88>
    {
      status = index;
  8031a0:	e0bff917 	ldw	r2,-28(fp)
  8031a4:	e0bffa15 	stw	r2,-24(fp)
  8031a8:	00002306 	br	803238 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  8031ac:	e0bff917 	ldw	r2,-28(fp)
  8031b0:	10c00324 	muli	r3,r2,12
  8031b4:	00802034 	movhi	r2,128
  8031b8:	1095cc04 	addi	r2,r2,22320
  8031bc:	1885883a 	add	r2,r3,r2
  8031c0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8031c4:	e0fffe17 	ldw	r3,-8(fp)
  8031c8:	00900034 	movhi	r2,16384
  8031cc:	10bfffc4 	addi	r2,r2,-1
  8031d0:	1886703a 	and	r3,r3,r2
  8031d4:	e0bffc17 	ldw	r2,-16(fp)
  8031d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8031dc:	e0bffb17 	ldw	r2,-20(fp)
  8031e0:	1000051e 	bne	r2,zero,8031f8 <open+0xd4>
  8031e4:	e13ffc17 	ldw	r4,-16(fp)
  8031e8:	08030580 	call	803058 <alt_file_locked>
  8031ec:	e0bffa15 	stw	r2,-24(fp)
  8031f0:	e0bffa17 	ldw	r2,-24(fp)
  8031f4:	10001016 	blt	r2,zero,803238 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8031f8:	e0bff817 	ldw	r2,-32(fp)
  8031fc:	10800317 	ldw	r2,12(r2)
  803200:	10000826 	beq	r2,zero,803224 <open+0x100>
  803204:	e0bff817 	ldw	r2,-32(fp)
  803208:	10800317 	ldw	r2,12(r2)
  80320c:	e13ffc17 	ldw	r4,-16(fp)
  803210:	e17ffd17 	ldw	r5,-12(fp)
  803214:	e1bffe17 	ldw	r6,-8(fp)
  803218:	e1ffff17 	ldw	r7,-4(fp)
  80321c:	103ee83a 	callr	r2
  803220:	00000106 	br	803228 <open+0x104>
  803224:	0005883a 	mov	r2,zero
  803228:	e0bffa15 	stw	r2,-24(fp)
  80322c:	00000206 	br	803238 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  803230:	00bffb44 	movi	r2,-19
  803234:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  803238:	e0bffa17 	ldw	r2,-24(fp)
  80323c:	1000090e 	bge	r2,zero,803264 <open+0x140>
  {
    alt_release_fd (index);  
  803240:	e13ff917 	ldw	r4,-28(fp)
  803244:	080327c0 	call	80327c <alt_release_fd>
    ALT_ERRNO = -status;
  803248:	08030080 	call	803008 <alt_get_errno>
  80324c:	1007883a 	mov	r3,r2
  803250:	e0bffa17 	ldw	r2,-24(fp)
  803254:	0085c83a 	sub	r2,zero,r2
  803258:	18800015 	stw	r2,0(r3)
    return -1;
  80325c:	00bfffc4 	movi	r2,-1
  803260:	00000106 	br	803268 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  803264:	e0bff917 	ldw	r2,-28(fp)
}
  803268:	e037883a 	mov	sp,fp
  80326c:	dfc00117 	ldw	ra,4(sp)
  803270:	df000017 	ldw	fp,0(sp)
  803274:	dec00204 	addi	sp,sp,8
  803278:	f800283a 	ret

0080327c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80327c:	defffe04 	addi	sp,sp,-8
  803280:	df000115 	stw	fp,4(sp)
  803284:	df000104 	addi	fp,sp,4
  803288:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80328c:	e0bfff17 	ldw	r2,-4(fp)
  803290:	108000d0 	cmplti	r2,r2,3
  803294:	10000d1e 	bne	r2,zero,8032cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803298:	00802034 	movhi	r2,128
  80329c:	1095cc04 	addi	r2,r2,22320
  8032a0:	e0ffff17 	ldw	r3,-4(fp)
  8032a4:	18c00324 	muli	r3,r3,12
  8032a8:	18c00204 	addi	r3,r3,8
  8032ac:	10c5883a 	add	r2,r2,r3
  8032b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8032b4:	00802034 	movhi	r2,128
  8032b8:	1095cc04 	addi	r2,r2,22320
  8032bc:	e0ffff17 	ldw	r3,-4(fp)
  8032c0:	18c00324 	muli	r3,r3,12
  8032c4:	10c5883a 	add	r2,r2,r3
  8032c8:	10000015 	stw	zero,0(r2)
  }
}
  8032cc:	e037883a 	mov	sp,fp
  8032d0:	df000017 	ldw	fp,0(sp)
  8032d4:	dec00104 	addi	sp,sp,4
  8032d8:	f800283a 	ret

008032dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8032dc:	defffa04 	addi	sp,sp,-24
  8032e0:	df000515 	stw	fp,20(sp)
  8032e4:	df000504 	addi	fp,sp,20
  8032e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8032ec:	0005303a 	rdctl	r2,status
  8032f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8032f4:	e0fffc17 	ldw	r3,-16(fp)
  8032f8:	00bfff84 	movi	r2,-2
  8032fc:	1884703a 	and	r2,r3,r2
  803300:	1001703a 	wrctl	status,r2
  
  return context;
  803304:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  803308:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80330c:	e0bfff17 	ldw	r2,-4(fp)
  803310:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  803314:	e0bffd17 	ldw	r2,-12(fp)
  803318:	10800017 	ldw	r2,0(r2)
  80331c:	e0fffd17 	ldw	r3,-12(fp)
  803320:	18c00117 	ldw	r3,4(r3)
  803324:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  803328:	e0bffd17 	ldw	r2,-12(fp)
  80332c:	10800117 	ldw	r2,4(r2)
  803330:	e0fffd17 	ldw	r3,-12(fp)
  803334:	18c00017 	ldw	r3,0(r3)
  803338:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80333c:	e0bffd17 	ldw	r2,-12(fp)
  803340:	e0fffd17 	ldw	r3,-12(fp)
  803344:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  803348:	e0bffd17 	ldw	r2,-12(fp)
  80334c:	e0fffd17 	ldw	r3,-12(fp)
  803350:	10c00015 	stw	r3,0(r2)
  803354:	e0bffb17 	ldw	r2,-20(fp)
  803358:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80335c:	e0bffe17 	ldw	r2,-8(fp)
  803360:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  803364:	e037883a 	mov	sp,fp
  803368:	df000017 	ldw	fp,0(sp)
  80336c:	dec00104 	addi	sp,sp,4
  803370:	f800283a 	ret

00803374 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  803374:	defffb04 	addi	sp,sp,-20
  803378:	dfc00415 	stw	ra,16(sp)
  80337c:	df000315 	stw	fp,12(sp)
  803380:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  803384:	d0a00817 	ldw	r2,-32736(gp)
  803388:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80338c:	d0a63b17 	ldw	r2,-26388(gp)
  803390:	10800044 	addi	r2,r2,1
  803394:	d0a63b15 	stw	r2,-26388(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803398:	00002e06 	br	803454 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80339c:	e0bffd17 	ldw	r2,-12(fp)
  8033a0:	10800017 	ldw	r2,0(r2)
  8033a4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8033a8:	e0bffd17 	ldw	r2,-12(fp)
  8033ac:	10800403 	ldbu	r2,16(r2)
  8033b0:	10803fcc 	andi	r2,r2,255
  8033b4:	10000426 	beq	r2,zero,8033c8 <alt_tick+0x54>
  8033b8:	d0a63b17 	ldw	r2,-26388(gp)
  8033bc:	1000021e 	bne	r2,zero,8033c8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8033c0:	e0bffd17 	ldw	r2,-12(fp)
  8033c4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8033c8:	e0bffd17 	ldw	r2,-12(fp)
  8033cc:	10800217 	ldw	r2,8(r2)
  8033d0:	d0e63b17 	ldw	r3,-26388(gp)
  8033d4:	18801d36 	bltu	r3,r2,80344c <alt_tick+0xd8>
  8033d8:	e0bffd17 	ldw	r2,-12(fp)
  8033dc:	10800403 	ldbu	r2,16(r2)
  8033e0:	10803fcc 	andi	r2,r2,255
  8033e4:	1000191e 	bne	r2,zero,80344c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8033e8:	e0bffd17 	ldw	r2,-12(fp)
  8033ec:	10800317 	ldw	r2,12(r2)
  8033f0:	e0fffd17 	ldw	r3,-12(fp)
  8033f4:	18c00517 	ldw	r3,20(r3)
  8033f8:	1809883a 	mov	r4,r3
  8033fc:	103ee83a 	callr	r2
  803400:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  803404:	e0bfff17 	ldw	r2,-4(fp)
  803408:	1000031e 	bne	r2,zero,803418 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80340c:	e13ffd17 	ldw	r4,-12(fp)
  803410:	08032dc0 	call	8032dc <alt_alarm_stop>
  803414:	00000d06 	br	80344c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  803418:	e0bffd17 	ldw	r2,-12(fp)
  80341c:	10c00217 	ldw	r3,8(r2)
  803420:	e0bfff17 	ldw	r2,-4(fp)
  803424:	1887883a 	add	r3,r3,r2
  803428:	e0bffd17 	ldw	r2,-12(fp)
  80342c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  803430:	e0bffd17 	ldw	r2,-12(fp)
  803434:	10c00217 	ldw	r3,8(r2)
  803438:	d0a63b17 	ldw	r2,-26388(gp)
  80343c:	1880032e 	bgeu	r3,r2,80344c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  803440:	e0bffd17 	ldw	r2,-12(fp)
  803444:	00c00044 	movi	r3,1
  803448:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80344c:	e0bffe17 	ldw	r2,-8(fp)
  803450:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803454:	e0fffd17 	ldw	r3,-12(fp)
  803458:	d0a00804 	addi	r2,gp,-32736
  80345c:	18bfcf1e 	bne	r3,r2,80339c <__alt_data_end+0xff80339c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  803460:	0001883a 	nop
}
  803464:	e037883a 	mov	sp,fp
  803468:	dfc00117 	ldw	ra,4(sp)
  80346c:	df000017 	ldw	fp,0(sp)
  803470:	dec00204 	addi	sp,sp,8
  803474:	f800283a 	ret

00803478 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  803478:	defffd04 	addi	sp,sp,-12
  80347c:	dfc00215 	stw	ra,8(sp)
  803480:	df000115 	stw	fp,4(sp)
  803484:	df000104 	addi	fp,sp,4
  803488:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80348c:	e13fff17 	ldw	r4,-4(fp)
  803490:	08034c80 	call	8034c8 <alt_busy_sleep>
}
  803494:	e037883a 	mov	sp,fp
  803498:	dfc00117 	ldw	ra,4(sp)
  80349c:	df000017 	ldw	fp,0(sp)
  8034a0:	dec00204 	addi	sp,sp,8
  8034a4:	f800283a 	ret

008034a8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8034a8:	deffff04 	addi	sp,sp,-4
  8034ac:	df000015 	stw	fp,0(sp)
  8034b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8034b4:	000170fa 	wrctl	ienable,zero
}
  8034b8:	e037883a 	mov	sp,fp
  8034bc:	df000017 	ldw	fp,0(sp)
  8034c0:	dec00104 	addi	sp,sp,4
  8034c4:	f800283a 	ret

008034c8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8034c8:	defffa04 	addi	sp,sp,-24
  8034cc:	dfc00515 	stw	ra,20(sp)
  8034d0:	df000415 	stw	fp,16(sp)
  8034d4:	df000404 	addi	fp,sp,16
  8034d8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8034dc:	008000c4 	movi	r2,3
  8034e0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8034e4:	e0fffd17 	ldw	r3,-12(fp)
  8034e8:	008003f4 	movhi	r2,15
  8034ec:	10909004 	addi	r2,r2,16960
  8034f0:	1885383a 	mul	r2,r3,r2
  8034f4:	0100bef4 	movhi	r4,763
  8034f8:	213c2004 	addi	r4,r4,-3968
  8034fc:	100b883a 	mov	r5,r2
  803500:	08041200 	call	804120 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  803504:	01200034 	movhi	r4,32768
  803508:	213fffc4 	addi	r4,r4,-1
  80350c:	100b883a 	mov	r5,r2
  803510:	08041200 	call	804120 <__udivsi3>
  803514:	e13fff17 	ldw	r4,-4(fp)
  803518:	100b883a 	mov	r5,r2
  80351c:	08041200 	call	804120 <__udivsi3>
  803520:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  803524:	e0bffe17 	ldw	r2,-8(fp)
  803528:	10002a26 	beq	r2,zero,8035d4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80352c:	e03ffc15 	stw	zero,-16(fp)
  803530:	00001706 	br	803590 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  803534:	00a00034 	movhi	r2,32768
  803538:	10bfffc4 	addi	r2,r2,-1
  80353c:	10bfffc4 	addi	r2,r2,-1
  803540:	103ffe1e 	bne	r2,zero,80353c <__alt_data_end+0xff80353c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  803544:	e0fffd17 	ldw	r3,-12(fp)
  803548:	008003f4 	movhi	r2,15
  80354c:	10909004 	addi	r2,r2,16960
  803550:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  803554:	0100bef4 	movhi	r4,763
  803558:	213c2004 	addi	r4,r4,-3968
  80355c:	100b883a 	mov	r5,r2
  803560:	08041200 	call	804120 <__udivsi3>
  803564:	01200034 	movhi	r4,32768
  803568:	213fffc4 	addi	r4,r4,-1
  80356c:	100b883a 	mov	r5,r2
  803570:	08041200 	call	804120 <__udivsi3>
  803574:	1007883a 	mov	r3,r2
  803578:	e0bfff17 	ldw	r2,-4(fp)
  80357c:	10c5c83a 	sub	r2,r2,r3
  803580:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  803584:	e0bffc17 	ldw	r2,-16(fp)
  803588:	10800044 	addi	r2,r2,1
  80358c:	e0bffc15 	stw	r2,-16(fp)
  803590:	e0fffc17 	ldw	r3,-16(fp)
  803594:	e0bffe17 	ldw	r2,-8(fp)
  803598:	18bfe616 	blt	r3,r2,803534 <__alt_data_end+0xff803534>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80359c:	e0fffd17 	ldw	r3,-12(fp)
  8035a0:	008003f4 	movhi	r2,15
  8035a4:	10909004 	addi	r2,r2,16960
  8035a8:	1885383a 	mul	r2,r3,r2
  8035ac:	0100bef4 	movhi	r4,763
  8035b0:	213c2004 	addi	r4,r4,-3968
  8035b4:	100b883a 	mov	r5,r2
  8035b8:	08041200 	call	804120 <__udivsi3>
  8035bc:	1007883a 	mov	r3,r2
  8035c0:	e0bfff17 	ldw	r2,-4(fp)
  8035c4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8035c8:	10bfffc4 	addi	r2,r2,-1
  8035cc:	103ffe1e 	bne	r2,zero,8035c8 <__alt_data_end+0xff8035c8>
  8035d0:	00000d06 	br	803608 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8035d4:	e0fffd17 	ldw	r3,-12(fp)
  8035d8:	008003f4 	movhi	r2,15
  8035dc:	10909004 	addi	r2,r2,16960
  8035e0:	1885383a 	mul	r2,r3,r2
  8035e4:	0100bef4 	movhi	r4,763
  8035e8:	213c2004 	addi	r4,r4,-3968
  8035ec:	100b883a 	mov	r5,r2
  8035f0:	08041200 	call	804120 <__udivsi3>
  8035f4:	1007883a 	mov	r3,r2
  8035f8:	e0bfff17 	ldw	r2,-4(fp)
  8035fc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803600:	10bfffc4 	addi	r2,r2,-1
  803604:	00bffe16 	blt	zero,r2,803600 <__alt_data_end+0xff803600>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  803608:	0005883a 	mov	r2,zero
}
  80360c:	e037883a 	mov	sp,fp
  803610:	dfc00117 	ldw	ra,4(sp)
  803614:	df000017 	ldw	fp,0(sp)
  803618:	dec00204 	addi	sp,sp,8
  80361c:	f800283a 	ret

00803620 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  803620:	defffa04 	addi	sp,sp,-24
  803624:	dfc00515 	stw	ra,20(sp)
  803628:	df000415 	stw	fp,16(sp)
  80362c:	df000404 	addi	fp,sp,16
  803630:	e13ffe15 	stw	r4,-8(fp)
  803634:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  803638:	e0bfff17 	ldw	r2,-4(fp)
  80363c:	10800017 	ldw	r2,0(r2)
  803640:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  803644:	e13ffe17 	ldw	r4,-8(fp)
  803648:	0803cc40 	call	803cc4 <strlen>
  80364c:	10800044 	addi	r2,r2,1
  803650:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803654:	00000d06 	br	80368c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  803658:	e0bffc17 	ldw	r2,-16(fp)
  80365c:	10c00217 	ldw	r3,8(r2)
  803660:	e0bffd17 	ldw	r2,-12(fp)
  803664:	1809883a 	mov	r4,r3
  803668:	e17ffe17 	ldw	r5,-8(fp)
  80366c:	100d883a 	mov	r6,r2
  803670:	08039ec0 	call	8039ec <memcmp>
  803674:	1000021e 	bne	r2,zero,803680 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  803678:	e0bffc17 	ldw	r2,-16(fp)
  80367c:	00000706 	br	80369c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  803680:	e0bffc17 	ldw	r2,-16(fp)
  803684:	10800017 	ldw	r2,0(r2)
  803688:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80368c:	e0fffc17 	ldw	r3,-16(fp)
  803690:	e0bfff17 	ldw	r2,-4(fp)
  803694:	18bff01e 	bne	r3,r2,803658 <__alt_data_end+0xff803658>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  803698:	0005883a 	mov	r2,zero
}
  80369c:	e037883a 	mov	sp,fp
  8036a0:	dfc00117 	ldw	ra,4(sp)
  8036a4:	df000017 	ldw	fp,0(sp)
  8036a8:	dec00204 	addi	sp,sp,8
  8036ac:	f800283a 	ret

008036b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8036b0:	defffb04 	addi	sp,sp,-20
  8036b4:	dfc00415 	stw	ra,16(sp)
  8036b8:	df000315 	stw	fp,12(sp)
  8036bc:	df000304 	addi	fp,sp,12
  8036c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8036c4:	00802034 	movhi	r2,128
  8036c8:	10973604 	addi	r2,r2,23768
  8036cc:	10800017 	ldw	r2,0(r2)
  8036d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8036d4:	00003106 	br	80379c <alt_find_file+0xec>
  {
    len = strlen(next->name);
  8036d8:	e0bffd17 	ldw	r2,-12(fp)
  8036dc:	10800217 	ldw	r2,8(r2)
  8036e0:	1009883a 	mov	r4,r2
  8036e4:	0803cc40 	call	803cc4 <strlen>
  8036e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8036ec:	e0bffd17 	ldw	r2,-12(fp)
  8036f0:	10c00217 	ldw	r3,8(r2)
  8036f4:	e0bffe17 	ldw	r2,-8(fp)
  8036f8:	10bfffc4 	addi	r2,r2,-1
  8036fc:	1885883a 	add	r2,r3,r2
  803700:	10800003 	ldbu	r2,0(r2)
  803704:	10803fcc 	andi	r2,r2,255
  803708:	1080201c 	xori	r2,r2,128
  80370c:	10bfe004 	addi	r2,r2,-128
  803710:	10800bd8 	cmpnei	r2,r2,47
  803714:	1000031e 	bne	r2,zero,803724 <alt_find_file+0x74>
    {
      len -= 1;
  803718:	e0bffe17 	ldw	r2,-8(fp)
  80371c:	10bfffc4 	addi	r2,r2,-1
  803720:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803724:	e0bffe17 	ldw	r2,-8(fp)
  803728:	e0ffff17 	ldw	r3,-4(fp)
  80372c:	1885883a 	add	r2,r3,r2
  803730:	10800003 	ldbu	r2,0(r2)
  803734:	10803fcc 	andi	r2,r2,255
  803738:	1080201c 	xori	r2,r2,128
  80373c:	10bfe004 	addi	r2,r2,-128
  803740:	10800be0 	cmpeqi	r2,r2,47
  803744:	1000081e 	bne	r2,zero,803768 <alt_find_file+0xb8>
  803748:	e0bffe17 	ldw	r2,-8(fp)
  80374c:	e0ffff17 	ldw	r3,-4(fp)
  803750:	1885883a 	add	r2,r3,r2
  803754:	10800003 	ldbu	r2,0(r2)
  803758:	10803fcc 	andi	r2,r2,255
  80375c:	1080201c 	xori	r2,r2,128
  803760:	10bfe004 	addi	r2,r2,-128
  803764:	10000a1e 	bne	r2,zero,803790 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  803768:	e0bffd17 	ldw	r2,-12(fp)
  80376c:	10c00217 	ldw	r3,8(r2)
  803770:	e0bffe17 	ldw	r2,-8(fp)
  803774:	1809883a 	mov	r4,r3
  803778:	e17fff17 	ldw	r5,-4(fp)
  80377c:	100d883a 	mov	r6,r2
  803780:	08039ec0 	call	8039ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803784:	1000021e 	bne	r2,zero,803790 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  803788:	e0bffd17 	ldw	r2,-12(fp)
  80378c:	00000806 	br	8037b0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  803790:	e0bffd17 	ldw	r2,-12(fp)
  803794:	10800017 	ldw	r2,0(r2)
  803798:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80379c:	e0fffd17 	ldw	r3,-12(fp)
  8037a0:	00802034 	movhi	r2,128
  8037a4:	10973604 	addi	r2,r2,23768
  8037a8:	18bfcb1e 	bne	r3,r2,8036d8 <__alt_data_end+0xff8036d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8037ac:	0005883a 	mov	r2,zero
}
  8037b0:	e037883a 	mov	sp,fp
  8037b4:	dfc00117 	ldw	ra,4(sp)
  8037b8:	df000017 	ldw	fp,0(sp)
  8037bc:	dec00204 	addi	sp,sp,8
  8037c0:	f800283a 	ret

008037c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8037c4:	defffc04 	addi	sp,sp,-16
  8037c8:	df000315 	stw	fp,12(sp)
  8037cc:	df000304 	addi	fp,sp,12
  8037d0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8037d4:	00bffa04 	movi	r2,-24
  8037d8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8037dc:	e03ffd15 	stw	zero,-12(fp)
  8037e0:	00001d06 	br	803858 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  8037e4:	00802034 	movhi	r2,128
  8037e8:	1095cc04 	addi	r2,r2,22320
  8037ec:	e0fffd17 	ldw	r3,-12(fp)
  8037f0:	18c00324 	muli	r3,r3,12
  8037f4:	10c5883a 	add	r2,r2,r3
  8037f8:	10800017 	ldw	r2,0(r2)
  8037fc:	1000131e 	bne	r2,zero,80384c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  803800:	00802034 	movhi	r2,128
  803804:	1095cc04 	addi	r2,r2,22320
  803808:	e0fffd17 	ldw	r3,-12(fp)
  80380c:	18c00324 	muli	r3,r3,12
  803810:	10c5883a 	add	r2,r2,r3
  803814:	e0ffff17 	ldw	r3,-4(fp)
  803818:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80381c:	00802034 	movhi	r2,128
  803820:	10973a04 	addi	r2,r2,23784
  803824:	10c00017 	ldw	r3,0(r2)
  803828:	e0bffd17 	ldw	r2,-12(fp)
  80382c:	1880040e 	bge	r3,r2,803840 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  803830:	00802034 	movhi	r2,128
  803834:	10973a04 	addi	r2,r2,23784
  803838:	e0fffd17 	ldw	r3,-12(fp)
  80383c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  803840:	e0bffd17 	ldw	r2,-12(fp)
  803844:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  803848:	00000606 	br	803864 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80384c:	e0bffd17 	ldw	r2,-12(fp)
  803850:	10800044 	addi	r2,r2,1
  803854:	e0bffd15 	stw	r2,-12(fp)
  803858:	e0bffd17 	ldw	r2,-12(fp)
  80385c:	10800810 	cmplti	r2,r2,32
  803860:	103fe01e 	bne	r2,zero,8037e4 <__alt_data_end+0xff8037e4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  803864:	e0bffe17 	ldw	r2,-8(fp)
}
  803868:	e037883a 	mov	sp,fp
  80386c:	df000017 	ldw	fp,0(sp)
  803870:	dec00104 	addi	sp,sp,4
  803874:	f800283a 	ret

00803878 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  803878:	defffb04 	addi	sp,sp,-20
  80387c:	df000415 	stw	fp,16(sp)
  803880:	df000404 	addi	fp,sp,16
  803884:	e13ffe15 	stw	r4,-8(fp)
  803888:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80388c:	e0bfff17 	ldw	r2,-4(fp)
  803890:	10840070 	cmpltui	r2,r2,4097
  803894:	1000021e 	bne	r2,zero,8038a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  803898:	00840004 	movi	r2,4096
  80389c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8038a0:	e0fffe17 	ldw	r3,-8(fp)
  8038a4:	e0bfff17 	ldw	r2,-4(fp)
  8038a8:	1885883a 	add	r2,r3,r2
  8038ac:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8038b0:	e0bffe17 	ldw	r2,-8(fp)
  8038b4:	e0bffc15 	stw	r2,-16(fp)
  8038b8:	00000506 	br	8038d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8038bc:	e0bffc17 	ldw	r2,-16(fp)
  8038c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8038c4:	e0bffc17 	ldw	r2,-16(fp)
  8038c8:	10800804 	addi	r2,r2,32
  8038cc:	e0bffc15 	stw	r2,-16(fp)
  8038d0:	e0fffc17 	ldw	r3,-16(fp)
  8038d4:	e0bffd17 	ldw	r2,-12(fp)
  8038d8:	18bff836 	bltu	r3,r2,8038bc <__alt_data_end+0xff8038bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8038dc:	e0bffe17 	ldw	r2,-8(fp)
  8038e0:	108007cc 	andi	r2,r2,31
  8038e4:	10000226 	beq	r2,zero,8038f0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8038e8:	e0bffc17 	ldw	r2,-16(fp)
  8038ec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8038f0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8038f4:	e037883a 	mov	sp,fp
  8038f8:	df000017 	ldw	fp,0(sp)
  8038fc:	dec00104 	addi	sp,sp,4
  803900:	f800283a 	ret

00803904 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  803904:	defffe04 	addi	sp,sp,-8
  803908:	df000115 	stw	fp,4(sp)
  80390c:	df000104 	addi	fp,sp,4
  803910:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  803914:	e0bfff17 	ldw	r2,-4(fp)
  803918:	10bffe84 	addi	r2,r2,-6
  80391c:	10c00428 	cmpgeui	r3,r2,16
  803920:	18001a1e 	bne	r3,zero,80398c <alt_exception_cause_generated_bad_addr+0x88>
  803924:	100690ba 	slli	r3,r2,2
  803928:	00802034 	movhi	r2,128
  80392c:	108e4f04 	addi	r2,r2,14652
  803930:	1885883a 	add	r2,r3,r2
  803934:	10800017 	ldw	r2,0(r2)
  803938:	1000683a 	jmp	r2
  80393c:	0080397c 	xorhi	r2,zero,229
  803940:	0080397c 	xorhi	r2,zero,229
  803944:	0080398c 	andi	r2,zero,230
  803948:	0080398c 	andi	r2,zero,230
  80394c:	0080398c 	andi	r2,zero,230
  803950:	0080397c 	xorhi	r2,zero,229
  803954:	00803984 	movi	r2,230
  803958:	0080398c 	andi	r2,zero,230
  80395c:	0080397c 	xorhi	r2,zero,229
  803960:	0080397c 	xorhi	r2,zero,229
  803964:	0080398c 	andi	r2,zero,230
  803968:	0080397c 	xorhi	r2,zero,229
  80396c:	00803984 	movi	r2,230
  803970:	0080398c 	andi	r2,zero,230
  803974:	0080398c 	andi	r2,zero,230
  803978:	0080397c 	xorhi	r2,zero,229
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80397c:	00800044 	movi	r2,1
  803980:	00000306 	br	803990 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  803984:	0005883a 	mov	r2,zero
  803988:	00000106 	br	803990 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80398c:	0005883a 	mov	r2,zero
  }
}
  803990:	e037883a 	mov	sp,fp
  803994:	df000017 	ldw	fp,0(sp)
  803998:	dec00104 	addi	sp,sp,4
  80399c:	f800283a 	ret

008039a0 <atexit>:
  8039a0:	200b883a 	mov	r5,r4
  8039a4:	000d883a 	mov	r6,zero
  8039a8:	0009883a 	mov	r4,zero
  8039ac:	000f883a 	mov	r7,zero
  8039b0:	0803d5c1 	jmpi	803d5c <__register_exitproc>

008039b4 <exit>:
  8039b4:	defffe04 	addi	sp,sp,-8
  8039b8:	000b883a 	mov	r5,zero
  8039bc:	dc000015 	stw	r16,0(sp)
  8039c0:	dfc00115 	stw	ra,4(sp)
  8039c4:	2021883a 	mov	r16,r4
  8039c8:	0803e700 	call	803e70 <__call_exitprocs>
  8039cc:	00802034 	movhi	r2,128
  8039d0:	10974004 	addi	r2,r2,23808
  8039d4:	11000017 	ldw	r4,0(r2)
  8039d8:	20800f17 	ldw	r2,60(r4)
  8039dc:	10000126 	beq	r2,zero,8039e4 <exit+0x30>
  8039e0:	103ee83a 	callr	r2
  8039e4:	8009883a 	mov	r4,r16
  8039e8:	08041300 	call	804130 <_exit>

008039ec <memcmp>:
  8039ec:	01c000c4 	movi	r7,3
  8039f0:	3980192e 	bgeu	r7,r6,803a58 <memcmp+0x6c>
  8039f4:	2144b03a 	or	r2,r4,r5
  8039f8:	11c4703a 	and	r2,r2,r7
  8039fc:	10000f26 	beq	r2,zero,803a3c <memcmp+0x50>
  803a00:	20800003 	ldbu	r2,0(r4)
  803a04:	28c00003 	ldbu	r3,0(r5)
  803a08:	10c0151e 	bne	r2,r3,803a60 <memcmp+0x74>
  803a0c:	31bfff84 	addi	r6,r6,-2
  803a10:	01ffffc4 	movi	r7,-1
  803a14:	00000406 	br	803a28 <memcmp+0x3c>
  803a18:	20800003 	ldbu	r2,0(r4)
  803a1c:	28c00003 	ldbu	r3,0(r5)
  803a20:	31bfffc4 	addi	r6,r6,-1
  803a24:	10c00e1e 	bne	r2,r3,803a60 <memcmp+0x74>
  803a28:	21000044 	addi	r4,r4,1
  803a2c:	29400044 	addi	r5,r5,1
  803a30:	31fff91e 	bne	r6,r7,803a18 <__alt_data_end+0xff803a18>
  803a34:	0005883a 	mov	r2,zero
  803a38:	f800283a 	ret
  803a3c:	20c00017 	ldw	r3,0(r4)
  803a40:	28800017 	ldw	r2,0(r5)
  803a44:	1880041e 	bne	r3,r2,803a58 <memcmp+0x6c>
  803a48:	31bfff04 	addi	r6,r6,-4
  803a4c:	21000104 	addi	r4,r4,4
  803a50:	29400104 	addi	r5,r5,4
  803a54:	39bff936 	bltu	r7,r6,803a3c <__alt_data_end+0xff803a3c>
  803a58:	303fe91e 	bne	r6,zero,803a00 <__alt_data_end+0xff803a00>
  803a5c:	003ff506 	br	803a34 <__alt_data_end+0xff803a34>
  803a60:	10c5c83a 	sub	r2,r2,r3
  803a64:	f800283a 	ret

00803a68 <memcpy>:
  803a68:	deffff04 	addi	sp,sp,-4
  803a6c:	dc000015 	stw	r16,0(sp)
  803a70:	00c003c4 	movi	r3,15
  803a74:	2005883a 	mov	r2,r4
  803a78:	1980432e 	bgeu	r3,r6,803b88 <memcpy+0x120>
  803a7c:	2146b03a 	or	r3,r4,r5
  803a80:	18c000cc 	andi	r3,r3,3
  803a84:	1800421e 	bne	r3,zero,803b90 <memcpy+0x128>
  803a88:	343ffc04 	addi	r16,r6,-16
  803a8c:	8020d13a 	srli	r16,r16,4
  803a90:	28c00104 	addi	r3,r5,4
  803a94:	23400104 	addi	r13,r4,4
  803a98:	801e913a 	slli	r15,r16,4
  803a9c:	2b000204 	addi	r12,r5,8
  803aa0:	22c00204 	addi	r11,r4,8
  803aa4:	7bc00504 	addi	r15,r15,20
  803aa8:	2a800304 	addi	r10,r5,12
  803aac:	22400304 	addi	r9,r4,12
  803ab0:	2bdf883a 	add	r15,r5,r15
  803ab4:	2811883a 	mov	r8,r5
  803ab8:	200f883a 	mov	r7,r4
  803abc:	41000017 	ldw	r4,0(r8)
  803ac0:	39c00404 	addi	r7,r7,16
  803ac4:	18c00404 	addi	r3,r3,16
  803ac8:	393ffc15 	stw	r4,-16(r7)
  803acc:	1bbffc17 	ldw	r14,-16(r3)
  803ad0:	6b400404 	addi	r13,r13,16
  803ad4:	5ac00404 	addi	r11,r11,16
  803ad8:	6bbffc15 	stw	r14,-16(r13)
  803adc:	63800017 	ldw	r14,0(r12)
  803ae0:	4a400404 	addi	r9,r9,16
  803ae4:	42000404 	addi	r8,r8,16
  803ae8:	5bbffc15 	stw	r14,-16(r11)
  803aec:	53800017 	ldw	r14,0(r10)
  803af0:	63000404 	addi	r12,r12,16
  803af4:	52800404 	addi	r10,r10,16
  803af8:	4bbffc15 	stw	r14,-16(r9)
  803afc:	1bffef1e 	bne	r3,r15,803abc <__alt_data_end+0xff803abc>
  803b00:	81c00044 	addi	r7,r16,1
  803b04:	380e913a 	slli	r7,r7,4
  803b08:	310003cc 	andi	r4,r6,15
  803b0c:	02c000c4 	movi	r11,3
  803b10:	11c7883a 	add	r3,r2,r7
  803b14:	29cb883a 	add	r5,r5,r7
  803b18:	59001f2e 	bgeu	r11,r4,803b98 <memcpy+0x130>
  803b1c:	1813883a 	mov	r9,r3
  803b20:	2811883a 	mov	r8,r5
  803b24:	200f883a 	mov	r7,r4
  803b28:	42800017 	ldw	r10,0(r8)
  803b2c:	4a400104 	addi	r9,r9,4
  803b30:	39ffff04 	addi	r7,r7,-4
  803b34:	4abfff15 	stw	r10,-4(r9)
  803b38:	42000104 	addi	r8,r8,4
  803b3c:	59fffa36 	bltu	r11,r7,803b28 <__alt_data_end+0xff803b28>
  803b40:	213fff04 	addi	r4,r4,-4
  803b44:	2008d0ba 	srli	r4,r4,2
  803b48:	318000cc 	andi	r6,r6,3
  803b4c:	21000044 	addi	r4,r4,1
  803b50:	2109883a 	add	r4,r4,r4
  803b54:	2109883a 	add	r4,r4,r4
  803b58:	1907883a 	add	r3,r3,r4
  803b5c:	290b883a 	add	r5,r5,r4
  803b60:	30000626 	beq	r6,zero,803b7c <memcpy+0x114>
  803b64:	198d883a 	add	r6,r3,r6
  803b68:	29c00003 	ldbu	r7,0(r5)
  803b6c:	18c00044 	addi	r3,r3,1
  803b70:	29400044 	addi	r5,r5,1
  803b74:	19ffffc5 	stb	r7,-1(r3)
  803b78:	19bffb1e 	bne	r3,r6,803b68 <__alt_data_end+0xff803b68>
  803b7c:	dc000017 	ldw	r16,0(sp)
  803b80:	dec00104 	addi	sp,sp,4
  803b84:	f800283a 	ret
  803b88:	2007883a 	mov	r3,r4
  803b8c:	003ff406 	br	803b60 <__alt_data_end+0xff803b60>
  803b90:	2007883a 	mov	r3,r4
  803b94:	003ff306 	br	803b64 <__alt_data_end+0xff803b64>
  803b98:	200d883a 	mov	r6,r4
  803b9c:	003ff006 	br	803b60 <__alt_data_end+0xff803b60>

00803ba0 <memset>:
  803ba0:	20c000cc 	andi	r3,r4,3
  803ba4:	2005883a 	mov	r2,r4
  803ba8:	18004326 	beq	r3,zero,803cb8 <memset+0x118>
  803bac:	31ffffc4 	addi	r7,r6,-1
  803bb0:	30004026 	beq	r6,zero,803cb4 <memset+0x114>
  803bb4:	2813883a 	mov	r9,r5
  803bb8:	200d883a 	mov	r6,r4
  803bbc:	2007883a 	mov	r3,r4
  803bc0:	00000406 	br	803bd4 <memset+0x34>
  803bc4:	3a3fffc4 	addi	r8,r7,-1
  803bc8:	31800044 	addi	r6,r6,1
  803bcc:	38003926 	beq	r7,zero,803cb4 <memset+0x114>
  803bd0:	400f883a 	mov	r7,r8
  803bd4:	18c00044 	addi	r3,r3,1
  803bd8:	32400005 	stb	r9,0(r6)
  803bdc:	1a0000cc 	andi	r8,r3,3
  803be0:	403ff81e 	bne	r8,zero,803bc4 <__alt_data_end+0xff803bc4>
  803be4:	010000c4 	movi	r4,3
  803be8:	21c02d2e 	bgeu	r4,r7,803ca0 <memset+0x100>
  803bec:	29803fcc 	andi	r6,r5,255
  803bf0:	3008923a 	slli	r4,r6,8
  803bf4:	218cb03a 	or	r6,r4,r6
  803bf8:	3008943a 	slli	r4,r6,16
  803bfc:	218cb03a 	or	r6,r4,r6
  803c00:	010003c4 	movi	r4,15
  803c04:	21c0182e 	bgeu	r4,r7,803c68 <memset+0xc8>
  803c08:	3b3ffc04 	addi	r12,r7,-16
  803c0c:	6018d13a 	srli	r12,r12,4
  803c10:	1a000104 	addi	r8,r3,4
  803c14:	1ac00204 	addi	r11,r3,8
  803c18:	6008913a 	slli	r4,r12,4
  803c1c:	1a800304 	addi	r10,r3,12
  803c20:	1813883a 	mov	r9,r3
  803c24:	21000504 	addi	r4,r4,20
  803c28:	1909883a 	add	r4,r3,r4
  803c2c:	49800015 	stw	r6,0(r9)
  803c30:	41800015 	stw	r6,0(r8)
  803c34:	59800015 	stw	r6,0(r11)
  803c38:	51800015 	stw	r6,0(r10)
  803c3c:	42000404 	addi	r8,r8,16
  803c40:	4a400404 	addi	r9,r9,16
  803c44:	5ac00404 	addi	r11,r11,16
  803c48:	52800404 	addi	r10,r10,16
  803c4c:	413ff71e 	bne	r8,r4,803c2c <__alt_data_end+0xff803c2c>
  803c50:	63000044 	addi	r12,r12,1
  803c54:	6018913a 	slli	r12,r12,4
  803c58:	39c003cc 	andi	r7,r7,15
  803c5c:	010000c4 	movi	r4,3
  803c60:	1b07883a 	add	r3,r3,r12
  803c64:	21c00e2e 	bgeu	r4,r7,803ca0 <memset+0x100>
  803c68:	1813883a 	mov	r9,r3
  803c6c:	3811883a 	mov	r8,r7
  803c70:	010000c4 	movi	r4,3
  803c74:	49800015 	stw	r6,0(r9)
  803c78:	423fff04 	addi	r8,r8,-4
  803c7c:	4a400104 	addi	r9,r9,4
  803c80:	223ffc36 	bltu	r4,r8,803c74 <__alt_data_end+0xff803c74>
  803c84:	393fff04 	addi	r4,r7,-4
  803c88:	2008d0ba 	srli	r4,r4,2
  803c8c:	39c000cc 	andi	r7,r7,3
  803c90:	21000044 	addi	r4,r4,1
  803c94:	2109883a 	add	r4,r4,r4
  803c98:	2109883a 	add	r4,r4,r4
  803c9c:	1907883a 	add	r3,r3,r4
  803ca0:	38000426 	beq	r7,zero,803cb4 <memset+0x114>
  803ca4:	19cf883a 	add	r7,r3,r7
  803ca8:	19400005 	stb	r5,0(r3)
  803cac:	18c00044 	addi	r3,r3,1
  803cb0:	19fffd1e 	bne	r3,r7,803ca8 <__alt_data_end+0xff803ca8>
  803cb4:	f800283a 	ret
  803cb8:	2007883a 	mov	r3,r4
  803cbc:	300f883a 	mov	r7,r6
  803cc0:	003fc806 	br	803be4 <__alt_data_end+0xff803be4>

00803cc4 <strlen>:
  803cc4:	208000cc 	andi	r2,r4,3
  803cc8:	10002026 	beq	r2,zero,803d4c <strlen+0x88>
  803ccc:	20800007 	ldb	r2,0(r4)
  803cd0:	10002026 	beq	r2,zero,803d54 <strlen+0x90>
  803cd4:	2005883a 	mov	r2,r4
  803cd8:	00000206 	br	803ce4 <strlen+0x20>
  803cdc:	10c00007 	ldb	r3,0(r2)
  803ce0:	18001826 	beq	r3,zero,803d44 <strlen+0x80>
  803ce4:	10800044 	addi	r2,r2,1
  803ce8:	10c000cc 	andi	r3,r2,3
  803cec:	183ffb1e 	bne	r3,zero,803cdc <__alt_data_end+0xff803cdc>
  803cf0:	10c00017 	ldw	r3,0(r2)
  803cf4:	01ffbff4 	movhi	r7,65279
  803cf8:	39ffbfc4 	addi	r7,r7,-257
  803cfc:	00ca303a 	nor	r5,zero,r3
  803d00:	01a02074 	movhi	r6,32897
  803d04:	19c7883a 	add	r3,r3,r7
  803d08:	31a02004 	addi	r6,r6,-32640
  803d0c:	1946703a 	and	r3,r3,r5
  803d10:	1986703a 	and	r3,r3,r6
  803d14:	1800091e 	bne	r3,zero,803d3c <strlen+0x78>
  803d18:	10800104 	addi	r2,r2,4
  803d1c:	10c00017 	ldw	r3,0(r2)
  803d20:	19cb883a 	add	r5,r3,r7
  803d24:	00c6303a 	nor	r3,zero,r3
  803d28:	28c6703a 	and	r3,r5,r3
  803d2c:	1986703a 	and	r3,r3,r6
  803d30:	183ff926 	beq	r3,zero,803d18 <__alt_data_end+0xff803d18>
  803d34:	00000106 	br	803d3c <strlen+0x78>
  803d38:	10800044 	addi	r2,r2,1
  803d3c:	10c00007 	ldb	r3,0(r2)
  803d40:	183ffd1e 	bne	r3,zero,803d38 <__alt_data_end+0xff803d38>
  803d44:	1105c83a 	sub	r2,r2,r4
  803d48:	f800283a 	ret
  803d4c:	2005883a 	mov	r2,r4
  803d50:	003fe706 	br	803cf0 <__alt_data_end+0xff803cf0>
  803d54:	0005883a 	mov	r2,zero
  803d58:	f800283a 	ret

00803d5c <__register_exitproc>:
  803d5c:	00802034 	movhi	r2,128
  803d60:	defffa04 	addi	sp,sp,-24
  803d64:	10974004 	addi	r2,r2,23808
  803d68:	dc000315 	stw	r16,12(sp)
  803d6c:	14000017 	ldw	r16,0(r2)
  803d70:	dc400415 	stw	r17,16(sp)
  803d74:	dfc00515 	stw	ra,20(sp)
  803d78:	80805217 	ldw	r2,328(r16)
  803d7c:	2023883a 	mov	r17,r4
  803d80:	10003626 	beq	r2,zero,803e5c <__register_exitproc+0x100>
  803d84:	10c00117 	ldw	r3,4(r2)
  803d88:	010007c4 	movi	r4,31
  803d8c:	20c00e16 	blt	r4,r3,803dc8 <__register_exitproc+0x6c>
  803d90:	1a400044 	addi	r9,r3,1
  803d94:	8800211e 	bne	r17,zero,803e1c <__register_exitproc+0xc0>
  803d98:	18c00084 	addi	r3,r3,2
  803d9c:	18c7883a 	add	r3,r3,r3
  803da0:	18c7883a 	add	r3,r3,r3
  803da4:	12400115 	stw	r9,4(r2)
  803da8:	10c7883a 	add	r3,r2,r3
  803dac:	19400015 	stw	r5,0(r3)
  803db0:	0005883a 	mov	r2,zero
  803db4:	dfc00517 	ldw	ra,20(sp)
  803db8:	dc400417 	ldw	r17,16(sp)
  803dbc:	dc000317 	ldw	r16,12(sp)
  803dc0:	dec00604 	addi	sp,sp,24
  803dc4:	f800283a 	ret
  803dc8:	00800034 	movhi	r2,0
  803dcc:	10800004 	addi	r2,r2,0
  803dd0:	10002526 	beq	r2,zero,803e68 <__register_exitproc+0x10c>
  803dd4:	01006404 	movi	r4,400
  803dd8:	d9400015 	stw	r5,0(sp)
  803ddc:	d9800115 	stw	r6,4(sp)
  803de0:	d9c00215 	stw	r7,8(sp)
  803de4:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  803de8:	d9400017 	ldw	r5,0(sp)
  803dec:	d9800117 	ldw	r6,4(sp)
  803df0:	d9c00217 	ldw	r7,8(sp)
  803df4:	10001c26 	beq	r2,zero,803e68 <__register_exitproc+0x10c>
  803df8:	80c05217 	ldw	r3,328(r16)
  803dfc:	10000115 	stw	zero,4(r2)
  803e00:	02400044 	movi	r9,1
  803e04:	10c00015 	stw	r3,0(r2)
  803e08:	80805215 	stw	r2,328(r16)
  803e0c:	10006215 	stw	zero,392(r2)
  803e10:	10006315 	stw	zero,396(r2)
  803e14:	0007883a 	mov	r3,zero
  803e18:	883fdf26 	beq	r17,zero,803d98 <__alt_data_end+0xff803d98>
  803e1c:	18d1883a 	add	r8,r3,r3
  803e20:	4211883a 	add	r8,r8,r8
  803e24:	1211883a 	add	r8,r2,r8
  803e28:	41802215 	stw	r6,136(r8)
  803e2c:	01000044 	movi	r4,1
  803e30:	11806217 	ldw	r6,392(r2)
  803e34:	20c8983a 	sll	r4,r4,r3
  803e38:	310cb03a 	or	r6,r6,r4
  803e3c:	11806215 	stw	r6,392(r2)
  803e40:	41c04215 	stw	r7,264(r8)
  803e44:	01800084 	movi	r6,2
  803e48:	89bfd31e 	bne	r17,r6,803d98 <__alt_data_end+0xff803d98>
  803e4c:	11806317 	ldw	r6,396(r2)
  803e50:	3108b03a 	or	r4,r6,r4
  803e54:	11006315 	stw	r4,396(r2)
  803e58:	003fcf06 	br	803d98 <__alt_data_end+0xff803d98>
  803e5c:	80805304 	addi	r2,r16,332
  803e60:	80805215 	stw	r2,328(r16)
  803e64:	003fc706 	br	803d84 <__alt_data_end+0xff803d84>
  803e68:	00bfffc4 	movi	r2,-1
  803e6c:	003fd106 	br	803db4 <__alt_data_end+0xff803db4>

00803e70 <__call_exitprocs>:
  803e70:	00802034 	movhi	r2,128
  803e74:	10974004 	addi	r2,r2,23808
  803e78:	10800017 	ldw	r2,0(r2)
  803e7c:	defff404 	addi	sp,sp,-48
  803e80:	dd800815 	stw	r22,32(sp)
  803e84:	d8800015 	stw	r2,0(sp)
  803e88:	10805204 	addi	r2,r2,328
  803e8c:	dd000615 	stw	r20,24(sp)
  803e90:	dc800415 	stw	r18,16(sp)
  803e94:	dfc00b15 	stw	ra,44(sp)
  803e98:	df000a15 	stw	fp,40(sp)
  803e9c:	ddc00915 	stw	r23,36(sp)
  803ea0:	dd400715 	stw	r21,28(sp)
  803ea4:	dcc00515 	stw	r19,20(sp)
  803ea8:	dc400315 	stw	r17,12(sp)
  803eac:	dc000215 	stw	r16,8(sp)
  803eb0:	2025883a 	mov	r18,r4
  803eb4:	2829883a 	mov	r20,r5
  803eb8:	d8800115 	stw	r2,4(sp)
  803ebc:	05bfffc4 	movi	r22,-1
  803ec0:	d8800017 	ldw	r2,0(sp)
  803ec4:	14c05217 	ldw	r19,328(r2)
  803ec8:	98001d26 	beq	r19,zero,803f40 <__call_exitprocs+0xd0>
  803ecc:	dd400117 	ldw	r21,4(sp)
  803ed0:	98800117 	ldw	r2,4(r19)
  803ed4:	173fffc4 	addi	fp,r2,-1
  803ed8:	e0000d16 	blt	fp,zero,803f10 <__call_exitprocs+0xa0>
  803edc:	14000044 	addi	r16,r2,1
  803ee0:	8421883a 	add	r16,r16,r16
  803ee4:	8421883a 	add	r16,r16,r16
  803ee8:	84402004 	addi	r17,r16,128
  803eec:	9c63883a 	add	r17,r19,r17
  803ef0:	9c21883a 	add	r16,r19,r16
  803ef4:	a0001e26 	beq	r20,zero,803f70 <__call_exitprocs+0x100>
  803ef8:	80804017 	ldw	r2,256(r16)
  803efc:	15001c26 	beq	r2,r20,803f70 <__call_exitprocs+0x100>
  803f00:	e73fffc4 	addi	fp,fp,-1
  803f04:	843fff04 	addi	r16,r16,-4
  803f08:	8c7fff04 	addi	r17,r17,-4
  803f0c:	e5bff91e 	bne	fp,r22,803ef4 <__alt_data_end+0xff803ef4>
  803f10:	00800034 	movhi	r2,0
  803f14:	10800004 	addi	r2,r2,0
  803f18:	10000926 	beq	r2,zero,803f40 <__call_exitprocs+0xd0>
  803f1c:	98800117 	ldw	r2,4(r19)
  803f20:	1000311e 	bne	r2,zero,803fe8 <__call_exitprocs+0x178>
  803f24:	98800017 	ldw	r2,0(r19)
  803f28:	10003426 	beq	r2,zero,803ffc <__call_exitprocs+0x18c>
  803f2c:	9809883a 	mov	r4,r19
  803f30:	a8800015 	stw	r2,0(r21)
  803f34:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  803f38:	acc00017 	ldw	r19,0(r21)
  803f3c:	983fe41e 	bne	r19,zero,803ed0 <__alt_data_end+0xff803ed0>
  803f40:	dfc00b17 	ldw	ra,44(sp)
  803f44:	df000a17 	ldw	fp,40(sp)
  803f48:	ddc00917 	ldw	r23,36(sp)
  803f4c:	dd800817 	ldw	r22,32(sp)
  803f50:	dd400717 	ldw	r21,28(sp)
  803f54:	dd000617 	ldw	r20,24(sp)
  803f58:	dcc00517 	ldw	r19,20(sp)
  803f5c:	dc800417 	ldw	r18,16(sp)
  803f60:	dc400317 	ldw	r17,12(sp)
  803f64:	dc000217 	ldw	r16,8(sp)
  803f68:	dec00c04 	addi	sp,sp,48
  803f6c:	f800283a 	ret
  803f70:	98800117 	ldw	r2,4(r19)
  803f74:	80c00017 	ldw	r3,0(r16)
  803f78:	10bfffc4 	addi	r2,r2,-1
  803f7c:	17001526 	beq	r2,fp,803fd4 <__call_exitprocs+0x164>
  803f80:	80000015 	stw	zero,0(r16)
  803f84:	183fde26 	beq	r3,zero,803f00 <__alt_data_end+0xff803f00>
  803f88:	00800044 	movi	r2,1
  803f8c:	1708983a 	sll	r4,r2,fp
  803f90:	98806217 	ldw	r2,392(r19)
  803f94:	9dc00117 	ldw	r23,4(r19)
  803f98:	2084703a 	and	r2,r4,r2
  803f9c:	1000061e 	bne	r2,zero,803fb8 <__call_exitprocs+0x148>
  803fa0:	183ee83a 	callr	r3
  803fa4:	98800117 	ldw	r2,4(r19)
  803fa8:	15ffc51e 	bne	r2,r23,803ec0 <__alt_data_end+0xff803ec0>
  803fac:	a8800017 	ldw	r2,0(r21)
  803fb0:	14ffd326 	beq	r2,r19,803f00 <__alt_data_end+0xff803f00>
  803fb4:	003fc206 	br	803ec0 <__alt_data_end+0xff803ec0>
  803fb8:	98806317 	ldw	r2,396(r19)
  803fbc:	2084703a 	and	r2,r4,r2
  803fc0:	1000061e 	bne	r2,zero,803fdc <__call_exitprocs+0x16c>
  803fc4:	89400017 	ldw	r5,0(r17)
  803fc8:	9009883a 	mov	r4,r18
  803fcc:	183ee83a 	callr	r3
  803fd0:	003ff406 	br	803fa4 <__alt_data_end+0xff803fa4>
  803fd4:	9f000115 	stw	fp,4(r19)
  803fd8:	003fea06 	br	803f84 <__alt_data_end+0xff803f84>
  803fdc:	89000017 	ldw	r4,0(r17)
  803fe0:	183ee83a 	callr	r3
  803fe4:	003fef06 	br	803fa4 <__alt_data_end+0xff803fa4>
  803fe8:	98800017 	ldw	r2,0(r19)
  803fec:	982b883a 	mov	r21,r19
  803ff0:	1027883a 	mov	r19,r2
  803ff4:	983fb61e 	bne	r19,zero,803ed0 <__alt_data_end+0xff803ed0>
  803ff8:	003fd106 	br	803f40 <__alt_data_end+0xff803f40>
  803ffc:	0005883a 	mov	r2,zero
  804000:	003ffa06 	br	803fec <__alt_data_end+0xff803fec>

00804004 <udivmodsi4>:
  804004:	2900182e 	bgeu	r5,r4,804068 <udivmodsi4+0x64>
  804008:	28001716 	blt	r5,zero,804068 <udivmodsi4+0x64>
  80400c:	00800804 	movi	r2,32
  804010:	00c00044 	movi	r3,1
  804014:	00000206 	br	804020 <udivmodsi4+0x1c>
  804018:	10001126 	beq	r2,zero,804060 <udivmodsi4+0x5c>
  80401c:	28000516 	blt	r5,zero,804034 <udivmodsi4+0x30>
  804020:	294b883a 	add	r5,r5,r5
  804024:	10bfffc4 	addi	r2,r2,-1
  804028:	18c7883a 	add	r3,r3,r3
  80402c:	293ffa36 	bltu	r5,r4,804018 <__alt_data_end+0xff804018>
  804030:	18000b26 	beq	r3,zero,804060 <udivmodsi4+0x5c>
  804034:	0005883a 	mov	r2,zero
  804038:	21400236 	bltu	r4,r5,804044 <udivmodsi4+0x40>
  80403c:	2149c83a 	sub	r4,r4,r5
  804040:	10c4b03a 	or	r2,r2,r3
  804044:	1806d07a 	srli	r3,r3,1
  804048:	280ad07a 	srli	r5,r5,1
  80404c:	183ffa1e 	bne	r3,zero,804038 <__alt_data_end+0xff804038>
  804050:	3000011e 	bne	r6,zero,804058 <udivmodsi4+0x54>
  804054:	f800283a 	ret
  804058:	2005883a 	mov	r2,r4
  80405c:	f800283a 	ret
  804060:	0005883a 	mov	r2,zero
  804064:	003ffa06 	br	804050 <__alt_data_end+0xff804050>
  804068:	00c00044 	movi	r3,1
  80406c:	003ff106 	br	804034 <__alt_data_end+0xff804034>

00804070 <__divsi3>:
  804070:	defffe04 	addi	sp,sp,-8
  804074:	dfc00115 	stw	ra,4(sp)
  804078:	dc000015 	stw	r16,0(sp)
  80407c:	20000b16 	blt	r4,zero,8040ac <__divsi3+0x3c>
  804080:	0021883a 	mov	r16,zero
  804084:	28000c16 	blt	r5,zero,8040b8 <__divsi3+0x48>
  804088:	000d883a 	mov	r6,zero
  80408c:	08040040 	call	804004 <udivmodsi4>
  804090:	0407c83a 	sub	r3,zero,r16
  804094:	1884f03a 	xor	r2,r3,r2
  804098:	1405883a 	add	r2,r2,r16
  80409c:	dfc00117 	ldw	ra,4(sp)
  8040a0:	dc000017 	ldw	r16,0(sp)
  8040a4:	dec00204 	addi	sp,sp,8
  8040a8:	f800283a 	ret
  8040ac:	0109c83a 	sub	r4,zero,r4
  8040b0:	04000044 	movi	r16,1
  8040b4:	283ff40e 	bge	r5,zero,804088 <__alt_data_end+0xff804088>
  8040b8:	014bc83a 	sub	r5,zero,r5
  8040bc:	8400005c 	xori	r16,r16,1
  8040c0:	003ff106 	br	804088 <__alt_data_end+0xff804088>

008040c4 <__modsi3>:
  8040c4:	defffd04 	addi	sp,sp,-12
  8040c8:	dfc00215 	stw	ra,8(sp)
  8040cc:	dc400115 	stw	r17,4(sp)
  8040d0:	dc000015 	stw	r16,0(sp)
  8040d4:	20000c16 	blt	r4,zero,804108 <__modsi3+0x44>
  8040d8:	0023883a 	mov	r17,zero
  8040dc:	0021883a 	mov	r16,zero
  8040e0:	28000d16 	blt	r5,zero,804118 <__modsi3+0x54>
  8040e4:	01800044 	movi	r6,1
  8040e8:	08040040 	call	804004 <udivmodsi4>
  8040ec:	1404f03a 	xor	r2,r2,r16
  8040f0:	8885883a 	add	r2,r17,r2
  8040f4:	dfc00217 	ldw	ra,8(sp)
  8040f8:	dc400117 	ldw	r17,4(sp)
  8040fc:	dc000017 	ldw	r16,0(sp)
  804100:	dec00304 	addi	sp,sp,12
  804104:	f800283a 	ret
  804108:	0109c83a 	sub	r4,zero,r4
  80410c:	04400044 	movi	r17,1
  804110:	043fffc4 	movi	r16,-1
  804114:	283ff30e 	bge	r5,zero,8040e4 <__alt_data_end+0xff8040e4>
  804118:	014bc83a 	sub	r5,zero,r5
  80411c:	003ff106 	br	8040e4 <__alt_data_end+0xff8040e4>

00804120 <__udivsi3>:
  804120:	000d883a 	mov	r6,zero
  804124:	08040041 	jmpi	804004 <udivmodsi4>

00804128 <__umodsi3>:
  804128:	01800044 	movi	r6,1
  80412c:	08040041 	jmpi	804004 <udivmodsi4>

00804130 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  804130:	defffd04 	addi	sp,sp,-12
  804134:	df000215 	stw	fp,8(sp)
  804138:	df000204 	addi	fp,sp,8
  80413c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  804140:	0001883a 	nop
  804144:	e0bfff17 	ldw	r2,-4(fp)
  804148:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80414c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  804150:	10000226 	beq	r2,zero,80415c <_exit+0x2c>
    ALT_SIM_FAIL();
  804154:	002af070 	cmpltui	zero,zero,43969
  804158:	00000106 	br	804160 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80415c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  804160:	003fff06 	br	804160 <__alt_data_end+0xff804160>
